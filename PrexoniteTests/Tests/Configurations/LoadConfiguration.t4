<#+ 
    const string ttEscape = @"..\..\";
    const string testPathPrefix = ttEscape + @"psr-tests";
    const string testConfigurationName = "testconfig.txt";
    const string testPattern = @"*.test.pxs";

    const char configSectionSep = '>';
    const char configEntrySep = '|';

    // [(test_file_name, [under_test], [test_case])] 
    IEnumerable<Tuple<string,IEnumerable<string>,IEnumerable<string>>> _getTestConfiguration()
    {
        var path =Path.GetFullPath(Host.ResolvePath(Path.Combine(testPathPrefix, testConfigurationName)));
        using(var sr = new StreamReader(
                new FileStream(path, FileMode.Open, FileAccess.Read), 
                System.Text.Encoding.UTF8))
        {
            string line = sr.ReadLine();
            while(line != null && line.Length > 2)
            {
                var fs = line.Split(new [] {configSectionSep},3);
                if(fs.Length < 3)
                    continue;

                var tfn = fs[0];
                var entrySep = new []{configEntrySep};
                var underTest = fs[1].Split(entrySep).Skip(1);
                var testCases = fs[2].Split(entrySep).Skip(1);
                yield return Tuple.Create<string,IEnumerable<string>,IEnumerable<string>>(tfn,underTest,testCases);

                line = sr.ReadLine();
            }
        }
    }

    string _toIdentifier(string testFileName)
    {
        testFileName = Path.GetFileName(testFileName);
        return testFileName.Substring(0,testFileName.Length - (testPattern.Length-1)).Replace("-","_");
    }

    string _toTestFilePath(string testFileName)
    {
        var abs = Path.GetFullPath(Host.ResolvePath(Path.Combine(testPathPrefix, testFileName)));
        var root = Path.GetFullPath(Host.ResolvePath(testPathPrefix));
        return "." + abs.Substring(root.Length);
    }
    
    string _toPsrClassName(string fileName)
    {
        return "Unit_" + _toIdentifier(fileName);
    }
#>
/*
 * Prexonite, a scripting engine (Scripting Language -> Bytecode -> Virtual Machine)
 *  Copyright (C) 2007  Christian "SealedSun" Klauser
 *  E-mail  sealedsun a.t gmail d.ot com
 *  Web     http://www.sealedsun.ch/
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  Please contact me (sealedsun a.t gmail do.t com) if you need a different license.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

StatementBlock<AstBlock block>
=
	Statement<block>
.

Statement<AstBlock block>
=
(
		IF( isLabel() )
			ExplicitLabel<block>  
	|   [ SimpleStatement<block> ] semicolon
	|   StructureStatement<block>
)
{	and Statement<block> 
}
.

SimpleStatement<AstBlock block>
=
	ExplicitGoTo<block>
|   Declaration
|   IF ( isVariableDeclaration() ) 
        VariableDeclarationStatement<block>
|   GetSetComplex<block>
|   Return<block>
|   Throw<block>
|   LetBindingStmt<block>
.

StructureStatement<AstBlock block>
=
    (.  _pushLexerState(Lexer.Asm); .)
    asm AsmStatementBlock<block>
    (.  _popLexerState(); .)
|   Condition<block>
|   WhileLoop<block>
|   ForLoop<block>
|   ForeachLoop<block>
|   NestedFunction<block>
|   TryCatchFinally<block>
|   Using<block>
|	lbrace
	{
		Statement<block>
	}
	rbrace
.

GetSetComplex<AstBlock block>
                                        (.  AstGetSet complex = null; 
                                            AstGetSetSymbol symbol = null;
                                            bool isDeclaration = false;
                                            AstNode node = null;
                                        .)
=
//GetSet Initiator
GetInitiator<out complex, out isDeclaration>

//GetSet Extensions
    {   GetSetExtension<complex, out complex>
    }
//GetSet Terminator
(                                       (.  block.Add(complex); .)
|   inc                                 (.  block.Add(AstUnaryOperator._Create(this, UnaryOperator.PostIncrement, complex)); .)
|   dec                                 (.  block.Add(AstUnaryOperator._Create(this, UnaryOperator.PostDecrement, complex)); .)
|   Assignment<complex, out node>       (.  symbol = node as AstGetSetSymbol;
                                            if(symbol != null 
                                                && InterpretationIsLocalVariable(symbol.Implementation.Interpretation) 
                                                && isDeclaration)
                                            {
                                                symbol.Implementation = symbol.Implementation.With(
                                                    interpretation:InterpretAsObjectVariable(symbol.Implementation.Interpretation));
                                            }
                                            block.Add(node);
                                        .)
|	AppendRightTermination<ref complex>
	{	AppendRightTermination<ref complex>
	}
										(.	block.Add(complex);  .)  
)
.

AppendRightTermination<ref AstGetSet complex>
		                                (.	AstGetSet actualComplex; .)
=
	appendright
	GetCall<out actualComplex>			(.	actualComplex.Arguments.RightAppend(complex);
											actualComplex.Arguments.ReleaseRightAppend();
											if(actualComplex is AstGetSetSymbol && ((AstGetSetSymbol)actualComplex).IsVariable)
										        actualComplex.Call = PCall.Set;
										    complex = actualComplex;
										.)
.

GetSetExtension<IAstExpression subject, out AstGetSet extension>
                                        (.  extension = null; string id;
											if(subject == null)
											{
												SemErr("Member access not preceded by a proper expression.");
												subject = new AstConstant(this,null);
											}
                                        .)
                                        
=
    IF( isIndirectCall() )
    dot                                 (.  extension = new AstIndirectCall(this, PCall.Get, subject); .)
    Arguments<extension.Arguments>
|   dot
    Id<out id>                          (.  extension = new AstGetSetMemberAccess(this, PCall.Get, subject, id); .)
    Arguments<extension.Arguments> 
|                                       (.  
                                            IAstExpression expr; 
                                            extension = new AstGetSetMemberAccess(this, PCall.Get, subject, ""); 
                                        .)
    lbrack [
            Expr<out expr>              (.  extension.Arguments.Add(expr); .)  
            { WEAK comma Expr<out expr>   (.  extension.Arguments.Add(expr); .)
            }
        ]                                             
    rbrack                                                                      
.

GetInitiator<out AstGetSet complex, out bool isDeclaration>
                                        (.  complex = null; 
                                            AstGetSetSymbol symbol = null;
                                            AstGetSetStatic staticCall = null;
                                            AstGetSet member = null;
                                            IAstExpression expr;
                                            List<IAstExpression> args = new List<IAstExpression>();
                                            isDeclaration = false;                                            
                                            string id;
                                            int placeholderIndex = -1;
                                        .)
=
    //Actual value
    (   IF( isLikeFunction() || isUnknownId() ) 
        Function<out complex>
    |   Variable<out complex, out isDeclaration>
    |   StaticCall<out staticCall>
    |	lpar Expr<out expr>				(.	args.Add(expr); .)
		{	comma Expr<out expr>		(.	args.Add(expr); .) //multiple expressions can only be used as arguments
		}
		rpar
		(	GetSetExtension<expr, out member>
										(.	if(args.Count > 1)
												SemErr("A member access cannot have multiple subjects. (Did you mean '>>'?)");
										.)
		|	appendright
			GetCall<out complex>		(.	complex.Arguments.RightAppend(args);
											complex.Arguments.ReleaseRightAppend();
											if(complex is AstGetSetSymbol && ((AstGetSetSymbol)complex).IsVariable)
										        complex.Call = PCall.Set;
											member = complex;
										.)
		)
    )
                                        (.  complex = 
												(AstGetSet)symbol ?? 
												(AstGetSet)staticCall ?? 
												(AstGetSet)member ??
												complex; 
										.)
    //Reference
|   IF( isDeDereference() )
    pointer pointer Id<out id>          (.  SymbolEntry s = target.Symbols[id];
                                            SymbolInterpretations kind;
                                            if(s == null)
                                            {   
                                                SemErr("The symbol " + id + " is not defined"); 
                                                s = SymbolEntry.LocalObjectVariable(id);
                                                kind = s.Interpretation;
                                            }
                                            else
                                            {
                                                kind = s.Interpretation;
                                                if(s.Interpretation == SymbolInterpretations.LocalReferenceVariable)
                                                    kind = SymbolInterpretations.LocalObjectVariable;
                                                else if(s.Interpretation == SymbolInterpretations.GlobalReferenceVariable)
                                                    kind = SymbolInterpretations.GlobalObjectVariable;
                                                else
                                                    SemErr("Only reference variables can be dereferenced twice.");
                                            }
                                            complex = new AstGetSetReference(this, s.With(interpretation:kind));
                                        .)
|   pointer Id<out id>                  (.  SymbolEntry s = target.Symbols[id];
                                            if(s == null)
                                            {   
                                                SemErr("The symbol " + id + " is not defined"); 
                                                s = SymbolEntry.LocalObjectVariable(id);
                                            }
                                            else if(InterpretationIsLocalVariable(s.Interpretation))
                                            {
                                                if(isOuterVariable(s.InternalId))
                                                    target.RequireOuterVariable(s.InternalId);
                                            }
                                            complex = new AstGetSetReference(this, s);
                                        .)
|   question
    [   Integer<out placeholderIndex> ] (.  complex = new AstPlaceholder(this, 0 <= placeholderIndex ? (int?)placeholderIndex : null); .)
.

VariableDeclaration<out AstGetSet variable, bool isNewDecl>
                                        (.  variable = null; 
                                            string staticId = null; 
                                            string id = null;
                                            bool isOverrideDecl = false;
                                        .)
=                                       (.  SymbolInterpretations kind = SymbolInterpretations.Undefined; .)
(   (  var                              (.  kind = SymbolInterpretations.LocalObjectVariable; .)
    |  ref                              (.  kind = SymbolInterpretations.LocalReferenceVariable; .)
    )
    [   new                             (.  isOverrideDecl = true; .)
    ]
    Id<out id>                          (.  
                                            SmartDeclareLocal(id, kind, isOverrideDecl);
                                            staticId = id; 
                                        .)
|   static                              (.  kind = SymbolInterpretations.GlobalObjectVariable; .)
    [   var
    |   ref                             (.  kind = SymbolInterpretations.GlobalReferenceVariable; .)
    ]
    Id<out id>                          (.  staticId = target.Function.Id + "\\static\\" + id;
                                            target.DeclareModuleLocal(kind, id, staticId);
                                            if(!target.Loader.Options.TargetApplication.Variables.ContainsKey(staticId))
                                                target.Loader.Options.TargetApplication.Variables.Add(staticId, new PVariable(staticId));
                                        .)
)                                       (.  variable = InterpretationIsObjectVariable(kind) ?
												new AstGetSetSymbol(this, PCall.Get, new SymbolEntry(kind, staticId, null))
											:
												new AstGetSetReference(this, PCall.Get, new SymbolEntry(InterpretAsObjectVariable(kind),staticId, null)); 
                                                
                                            if(isNewDecl)
                                                variable = new AstGetSetNewDecl(this)
                                                {
                                                    Expression = variable,
                                                    Id = staticId
                                                };
                                        .)
.

Variable<out AstGetSet complex, out bool isDeclared>
                                        (.  string id; 
                                            isDeclared = false; 
                                            complex = null; 
                                            bool isNewDecl = false;
                                        .)
=
    [   new                             (.  isNewDecl = true; .)
    ]
    VariableDeclaration<out complex, isNewDecl>    (. isDeclared = true; .)
|   Id<out id>                          (.  
                                            SymbolEntry varSym;
                                            if(target.Symbols.TryGetValue(id, out varSym))
                                            {
                                                if(InterpretationIsLocalVariable(varSym.Interpretation))
                                                {
                                                    if(isOuterVariable(id))
                                                        target.RequireOuterVariable(id);                            
                                                }
                                                else if(!InterpretationIsVariable(varSym.Interpretation))
                                                {
                                                    SemErr(t.line, t.col, "Variable name expected but was " + 
                                                        Enum.GetName(typeof(SymbolInterpretations),
                                                            varSym.Interpretation));
                                                }
                                                complex = new AstGetSetSymbol(this, varSym);
                                            }
                                            else
                                            {
                                                //Unknown symbols are treated as functions. 
                                                //  See production Function for details.
                                                SemErr(t.line, t.col, 
                                                    "Internal compiler error. Did not catch unknown identifier.");
                                                complex = new AstGetSetSymbol(this, 
                                                    SymbolEntry.LocalObjectVariable("Not_a_Variable_Id"));
                                            }
                                        .)
.

VariableDeclarationStatement<AstBlock block>
=                                       (.  AstGetSet variable;
                                            bool isNewDecl = false;
                                        .)
    [ new                               (.  isNewDecl = true; .)
    ]
    VariableDeclaration<out variable, isNewDecl>
                                        (.  if(isNewDecl)
                                            {
                                                block.Add(variable);
                                            }
                                            else
                                            {
                                                //No additional action is required. This is just a platform
                                                //  for variable declarations without assignment.
                                            }
                                        .)
.

Function<out AstGetSet function>
                                (.  function = null; string id; .)
=
    Id<out id>                  (.  if(!target.Symbols.ContainsKey(id))
                                    {
                                        function = new AstUnresolved(this, id);
                                    }
                                    else
                                    {
                                        if(isOuterVariable(id))
                                            target.RequireOuterVariable(id);
                                        SymbolEntry sym = target.Symbols[id];
                                        if(isKnownMacroFunction(sym) || sym.Interpretation == SymbolInterpretations.MacroCommand) 
                                        {
                                            function = new AstMacroInvocation(this, sym);
                                        } 
                                        else
                                        {
                                            function = new AstGetSetSymbol(this, sym);
                                        }
                                    }
                                .)
    Arguments<function.Arguments>    
.

StaticCall<out AstGetSetStatic staticCall>
                                (.  IAstType typeExpr;
                                    string memberId;
                                    staticCall = null;
                                .)
=
    ExplicitTypeExpr<out typeExpr>
    dot Id<out memberId>        (.  staticCall = new AstGetSetStatic(this, PCall.Get, typeExpr, memberId); .)
    Arguments<staticCall.Arguments>
.

/*
StaticCall<out AstGetSetStatic staticCall>
                                (.  string id = "";
                                    System.Text.StringBuilder idBuilder = new System.Text.StringBuilder();
                                    bool staticPrefix = false;
                                .)
=

    [   doublecolon             (.  staticPrefix = true; .)
    ]   Ns<out id>              (.  idBuilder.Append(id); .)
    {   Ns<out id>              (.  idBuilder.Append("."+id); .)
    }
    Id<out id>                  (.  staticCall = createStaticCall(idBuilder.ToString(), id, staticPrefix); .)
    Arguments<staticCall.Arguments> 
. // */
                                    //Fallback in case of a syntax error to avoid NullReferenceExceptions
ExplicitLabel<AstBlock block>   (.  string id = "--\\NotAnId\\--"; .)
=
    (   Id<out id> colon
    |   lid                     (.  id = cache(t.val.Substring(0,t.val.Length-1)); .)
    )                           (.  block.Statements.Add(new AstExplicitLabel(this, id)); .)
.

ExplicitGoTo<AstBlock block>    (.  string id; .)
=
    goto
    Id<out id>                  (.  block.Statements.Add(new AstExplicitGoTo(this, id)); .)
.

Assignment<AstGetSet lvalue, out AstNode node>
                                (.  IAstExpression expr = null;
									BinaryOperator setModifier = BinaryOperator.None;
									IAstType T;
									node = lvalue;
								.)
=
(
	(   ( assign /*| appendleft*/ ) (.  setModifier = BinaryOperator.None; .)
	|   plus assign             (.  setModifier = BinaryOperator.Addition; .)
	|   minus assign            (.  setModifier = BinaryOperator.Subtraction; .)
	|   times assign            (.  setModifier = BinaryOperator.Multiply; .)
	|   div assign              (.  setModifier = BinaryOperator.Division; .)
	|   bitAnd assign           (.  setModifier = BinaryOperator.BitwiseAnd; .)
	|   bitOr assign            (.  setModifier = BinaryOperator.BitwiseOr; .)
	|	coalescence assign		(.	setModifier = BinaryOperator.Coalescence; .)
	)   Expr<out expr>        //(.	expr = expr; .)
	
|	(	tilde assign			(.	setModifier = BinaryOperator.Cast; .)
	)	TypeExpr<out T>			(.	expr = T; .)
)								
								(.  lvalue.Arguments.Add(expr);
									lvalue.Call = PCall.Set; 
									if(setModifier != BinaryOperator.None)
									    node = AstModifyingAssignment.Create(this,setModifier,lvalue);
								.)
.

Condition<AstBlock block>
                                (. IAstExpression expr = null; bool isNegative = false; .)
=
    (   if                      (.  isNegative = false; .)
    |   unless                  (.  isNegative = true; .)
    )
    
    lpar Expr<out expr> rpar    (.  AstCondition cond = new AstCondition(this, expr, isNegative);
                                    target.BeginBlock(cond.IfBlock);
                                .)
    
    StatementBlock<cond.IfBlock> 
                                (.  target.EndBlock(); .)

    
    [   else                    (.  target.BeginBlock(cond.ElseBlock); .)
        StatementBlock<cond.ElseBlock> 
                                (.  target.EndBlock(); .)
    ]                           (.  block.Add(cond); .)
.

WhileLoop<AstBlock block>
                                (.  AstWhileLoop loop = new AstWhileLoop(this); .)
=
(   (   while  | until          (.  loop.IsPositive = false; .)    
    )                           
    lpar Expr<out loop.Condition> rpar
                                (.  target.BeginBlock(loop.Block); //EndBlock is common for both loops
                                .)
    StatementBlock<loop.Block> 
    
|   do                          (.  target.BeginBlock(loop.Block); 
                                    loop.IsPrecondition = false;
                                .)
    StatementBlock<loop.Block>
    (   while  | until          (.  loop.IsPositive = false; .)    
    )                           
    lpar Expr<out loop.Condition> rpar
)                               (.  target.EndBlock(); block.Add(loop); .)
.

ForLoop<AstBlock block>         (.  AstForLoop loop;
                                .)
=
    for                         (.  loop = new AstForLoop(this); target.BeginBlock(loop.Block); .)
    lpar StatementBlock<loop.Initialize>
    (
		do StatementBlock<loop.NextIteration> 
                                (.  loop.IsPrecondition = false; .)
        (   while
        |   until               (.  loop.IsPositive = false; .)
        )
        Expr<out loop.Condition>
    |   [   while
        |   until               (.  loop.IsPositive = false; .)
        ]       
        Expr<out loop.Condition> 
        semicolon
        SimpleStatement<loop.NextIteration>
        [ semicolon ]
    )
    rpar
    StatementBlock<loop.Block>  (.  target.EndBlock(); block.Add(loop); .) // */
.

ForeachLoop<AstBlock block>
=
    foreach                      (.  AstForeachLoop loop = new AstForeachLoop(this);
                                     target.BeginBlock(loop.Block);
                                 .)
    lpar
    GetCall<out loop.Element> 
    in 
    Expr<out loop.List> 
    rpar
    StatementBlock<loop.Block>
                                (.  target.EndBlock();
                                    block.Add(loop); 
                                .) 
.

GetCall<out AstGetSet complex>
                                (.  AstGetSet getMember = null; bool isDeclaration; .)
=
    GetInitiator<out complex, out isDeclaration>
    { GetSetExtension<complex, out getMember> }
    
                                (.  if(getMember != null) 
                                    {
                                        complex = getMember; 
                                    }
                                    else
                                    {
                                        AstGetSetSymbol symbol = complex as AstGetSetSymbol;
                                        if(symbol != null 
                                            && InterpretationIsVariable(symbol.Implementation.Interpretation) 
                                            && isDeclaration)
                                        {
                                            symbol.Implementation = symbol.Implementation.With(InterpretAsObjectVariable(symbol.Implementation.Interpretation));
                                            complex = symbol;
                                        }                                        
                                    } .)
.

Return<AstBlock block>          (.  AstReturn ret = null; 
                                    AstExplicitGoTo jump = null; 
                                    IAstExpression expr = null; 
                                    AstLoopBlock bl = target.CurrentLoopBlock;
                                .)
=
(   
    (
        return                  (.  ret = new AstReturn(this, ReturnVariant.Exit); .)
    |   yield                   (.  ret = new AstReturn(this, ReturnVariant.Continue); .)
    )
    [   Expr<out expr>          (.  ret.Expression = expr; .)
    |   assign                  (.  ret.ReturnVariant = ReturnVariant.Set; .)
        Expr<out expr>          (.  ret.Expression = expr; .)
                                (.  SemErr("Return value assignment is no longer supported. You must use local variables instead."); .)
    ]
|   break                       (.  if(bl == null)
                                        ret = new AstReturn(this, ReturnVariant.Break); 
                                    else
                                        jump = new AstExplicitGoTo(this, bl.BreakLabel);
                                .)
|   continue                    (.  if(bl == null)
                                        ret = new AstReturn(this, ReturnVariant.Continue); 
                                    else
                                        jump = new AstExplicitGoTo(this, bl.ContinueLabel);
                                .)
)                               (.  block.Add((AstNode)ret ?? (AstNode)jump); .)
.

NestedFunction<AstBlock block>
                                (.  PFunction func; .)
=
    FunctionDefinition<out func>
                                (.  
                                    string logicalId = func.Meta[PFunction.LogicalIdKey];
                                    func.Meta[PFunction.ParentFunctionKey] = target.Function.Id;
                                    string physicalId = func.Id;
                                    
                                    CompilerTarget ft = FunctionTargets[func];
                                    AstGetSetSymbol setVar = new AstGetSetSymbol(this, PCall.Set, 
                                        SymbolEntry.LocalObjectVariable(logicalId));
                                    if(func.Meta[PFunction.LazyKey].Switch)
                                    {
                                        //Capture environment by value                                        
                                        var ps = ft.ToCaptureByValue(let_bindings(ft));
                                        ft._DetermineSharedNames(); //Need to re-determine shared names since
                                                                    // ToCaptureByValue does not automatically modify shared names
                                        var clos = new AstCreateClosure(this, func.Id);
                                        var callStub = new AstIndirectCall(this, clos);
                                        callStub.Arguments.AddRange(ps(this));
                                        setVar.Arguments.Add(callStub);
                                    }
                                    else if(ft.OuterVariables.Count > 0)
                                    {                                        
                                        setVar.Arguments.Add( new AstCreateClosure(this, physicalId) );                                        
                                    }
                                    else
                                    {
                                        setVar.Arguments.Add( new AstGetSetReference(this, 
                                            new SymbolEntry(SymbolInterpretations.Function, physicalId, null)) );
                                    }
                                    block.Add(setVar);
                                .)
.

LetBindingStmt<AstBlock block>
=
    let LetBinder<block> { comma LetBinder<block> }
.

LetBinder<AstBlock block>
                                (.  string id = null;
                                    IAstExpression thunk;
                                .)
=
    Id<out id>                  (.  //Declare local "let" variable
                                    SmartDeclareLocal(id, SymbolInterpretations.LocalObjectVariable);
                                    mark_as_let(target.Function, id);
                                    if(la.kind == _assign)
                                        _inject(_lazy,"lazy"); 
                                .)
    [   assign                      
        LazyExpression<out thunk>   
                                (.  
                                    //Assign thunk to that variable
                                    var assign = new AstGetSetSymbol(this, PCall.Set, 
                                        SymbolEntry.LocalObjectVariable(id));
                                    assign.Arguments.Add(thunk);
                                    block.Add(assign);
                                .)
    ]
.

TryCatchFinally<AstBlock block>
                                (.  AstTryCatchFinally a = new AstTryCatchFinally(this);
                                    AstGetSet excVar = null;
                                .)
=
    try                         (.  target.BeginBlock(a.TryBlock); .)
    lbrace
    {   Statement<a.TryBlock>
    }
    rbrace                      (. target.EndBlock(); .)
    [	catch                   (. target.BeginBlock(a.CatchBlock); .)
		(   lpar
			GetCall<out excVar> (. a.ExceptionVar = excVar; .)
			rpar
	    |                       (.  SemErr(la,"catch-clauses that don't store the exception are illegal."); .)
		)
		lbrace
		{   Statement<a.CatchBlock>
		}
		rbrace		            (.  target.EndBlock(); .)
	    
		[
			finally             (.  target.BeginBlock(a.FinallyBlock); .)
			lbrace
			{   Statement<a.FinallyBlock>
			}
			rbrace              (.  target.EndBlock(); .)
		]
		
	|	finally                 (.  target.BeginBlock(a.FinallyBlock); .)
		lbrace
		{   Statement<a.FinallyBlock>
		}
		rbrace                  (.  target.EndBlock(); .)
		
		[	                    (.  target.BeginBlock(a.CatchBlock); .)
		    catch
			(   lpar
				GetCall<out excVar>
                                (. a.ExceptionVar = excVar; .)
				rpar
			|                   (.  SemErr(la,"catch-clauses that don't store the exception are illegal."); .)
			)
			lbrace
			{   Statement<a.CatchBlock>
			}
			rbrace
			                    (.  target.EndBlock(); .)
		]
	]                       
                                (.  block.Add(a); .)
.

Throw<AstBlock block>
                                (.  AstThrow th; .)
=
	ThrowExpression<out th>
                                (.  block.Add(th); .)
.                                

Using<AstBlock block>
                                (.  AstUsing use = new AstUsing(this); .)
=
    uusing lpar Expr<out use.Expression> rpar
                                (.  target.BeginBlock(use.Block); .)
    StatementBlock<use.Block>
                                (.  target.EndBlock();
                                    block.Add(use); 
                                .)
.

Arguments<ArgumentsProxy args>
                                (.  
									IAstExpression expr;
                                    bool missingArg = false;
                                .)
=
	[
		lpar
		[	Expr<out expr>      (.  args.Add(expr); .)
			{	comma           (.  if(missingArg)
                                        SemErr("Missing argument expression (two consecutive commas)");
                                .)
				(   Expr<out expr>  
                                (.  args.Add(expr);
                                    missingArg = false;
                                .)
                |               (.  missingArg = true; .)
                )
			}
		]
		rpar
	]
								(.	args.RememberRightAppendPosition(); .)
	[
		appendleft
		(
			IF(la.kind == _lpar && (!isLambdaExpression()))
			lpar
			[	Expr<out expr>	(.  args.Add(expr); .)
				{	comma
					Expr<out expr>	
								(.  args.Add(expr); .)
				}
			]
			rpar
		|	Expr<out expr>		(.  args.Add(expr); .)
		)
	]
.
build
{
    require("soi.pxs");
}

Name Soi\DigitProduct;
Description "The digit sum is defined as the sum of all digits of a number. Similarly, the digit product is the product of all the digits. Find for a given integer n the smallest integer, whose digit product equals n.";
Author SealedSun;

Entry soi\DigitProduct\main;

function soi\DigitProduct\main(input)
{
    if(input == null)
    {
        print("Please enter an integer: ");
        input = ::Console.ReadLine()~Int;
    }
    
    
    
    //BEGIN OF ALGORITHM
    //Split the number up into factors
    //  Note: numbers that contain prime factors greater than 9 (two digits) cannot be represented 
    //  using the digit product.
    var rest = input;
    var factors = ~List.Create(0,0,0,0,0,0,0,0,0,0);
    until(rest == 1)
    {
        for(var i = 9; until i == 1; i--)
        {
            if (rest mod i == 0)
            {
                print("Found factor " + i);
                factors[i]+=1;
                rest /= i;
                println("; " + rest + " remaining.");
                break;
            }
        }
            
        if(i == 1) //No factor could be found
        {
            //  -> cannot be divided further
            //  -> input cannot be represented using the digit product
            println = "-1";
            return;
        }
    }
    
    print = input + " => ";
    for(var i = 2; until i > 9; i++)
        for(var j = 0; j < factors[i]; j++)
            print(i);   
    //END OF ALGORITHM
    
    println;
}
declare soi\DigitProduct\main as digitProduct;
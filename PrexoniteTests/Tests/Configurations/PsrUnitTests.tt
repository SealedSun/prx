<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
// ReSharper disable RedundantUsingDirective
using System;
using System.Reflection;
using System.Collections.Generic;
using Prexonite.Types;
using Prexonite.Compiler.Cil;
using NUnit.Framework;
// ReSharper restore RedundantUsingDirective

// ReSharper disable RedundantExplicitArrayCreation
// ReSharper disable InconsistentNaming

namespace PrexoniteTests.Tests.Configurations
{
<# 
    // [testFile :: (test_file_name, [under_test], [test_deps], [test_case])] 
    foreach(var testFile in _getTestConfiguration()) 
    { 
#>
        public abstract class <#=_toPsrClassName(testFile.Item1)#> : ScriptedUnitTestContainer
        {
            [TestFixtureSetUp]
            public void SetupTestFile()
            {
                SetUpLoader();
                // Units under test
                Runner.SetupUnitsUnderTest(this, new string[] {
<#                  foreach(var fut in testFile.Item2) { #>
                        @"<#=fut#>",
<#                  } #>
                });
                // Testing framework
                LoadUnitTestingFramework();
                // Test dependencies
                Runner.SetupDependencies(this, new string[] {
<#                  foreach(var dep in testFile.Item3) { #>
                        @"<#=dep#>",
<#                  } #>                                            
                });
                // Potentially isolate test code from rest
                Runner.PrepareTestCompilation(this);
                // Actual test code
                RequireFile(@"<#=_toTestFilePath(testFile.Item1)#>");                
                Runner.PrepareExecution(this);
            }

<#      foreach(var testCase in testFile.Item4) { #>
            [Test]
            public void <#=testCase.Replace(@"\","_").Replace("$","_").Replace("'","_")#>()
            {
                RunUnitTest(@"<#=testCase#>");
            } 
<#      } #>
        }
<# } #>
}

// ReSharper restore RedundantExplicitArrayCreation
// ReSharper restore InconsistentNaming

<#@ include file="LoadConfiguration.t4" #>
<#@ assembly name="System.Core" #>
<#@ template debug="true" hostSpecific="true" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#+ 
    readonly string ttEscape = Path.Combine("..", "..");
    const string testPathPrefix = ttEscape + @"psr-tests";
    const string testConfigurationName = "testconfig.txt";
    const string testPattern = @"*.test.pxs";
    
    const char configSectionSep = '>';
    const char configEntrySep = '|';
	const char configDependencySep = '<';

	class Dependency
	{
		public string FileName;
		public IEnumerable<string> Dependencies;
	}

	class Configuration 
	{
		public string TestFileName;
		public IEnumerable<string> TestCases;
		public IEnumerable<Dependency> UnitsUnderTest;
		public IEnumerable<Dependency> TestDependencies;
	}

	Dependency _getDependencies(string spec)
	{
		var ds = spec.Split(configDependencySep);
		return new Dependency
		{
			FileName = ds[0],
			Dependencies = ds.Skip(1)
		};
	}

    // [(test_file_name, [under_test], [test_deps], [test_case])] 
    IEnumerable<Configuration> _getTestConfiguration()
    {
        var path = Path.GetFullPath(Host.ResolvePath(Path.Combine(testPathPrefix, testConfigurationName)));
        using(var sr = new StreamReader(
                new FileStream(path, FileMode.Open, FileAccess.Read), 
                System.Text.Encoding.UTF8))
        {
            string line = sr.ReadLine();
            while(line != null && line.Length > 2)
            {
                // Normalize directory separator for cross-platform testing 
                line = line.Replace(@"/", System.IO.Path.DirectorySeparatorChar);
                line = line.Replace(@"\", System.IO.Path.DirectorySeparatorChar);
                
                var fs = line.Split(new [] {configSectionSep},4);
                if(fs.Length < 4)
                    continue;

                var tfn = fs[0];
                var entrySep = new []{configEntrySep};
                var underTest = fs[1].Split(entrySep).Skip(1).Select(_getDependencies);
                var deps      = fs[2].Split(entrySep).Skip(1).Select(_getDependencies);
                var testCases = fs[3].Split(entrySep).Skip(1);
                yield return new Configuration {
					TestFileName = tfn,
					TestCases = testCases,
					UnitsUnderTest = underTest,
					TestDependencies = deps
				};

                line = sr.ReadLine();
            }
        }
    }

    string _toIdentifier(string testFileName)
    {
        testFileName = Path.GetFileName(testFileName);
        return testFileName.Substring(0,testFileName.Length - (testPattern.Length-1)).Replace("-","_");
    }

    string _toTestFilePath(string testFileName)
    {
        var abs = Path.GetFullPath(Host.ResolvePath(Path.Combine(testPathPrefix, testFileName)));
        var root = Path.GetFullPath(Host.ResolvePath(testPathPrefix));
        return "." + abs.Substring(root.Length);
    }
    
    string _toPsrClassName(string fileName)
    {
        return "Unit_" + _toIdentifier(fileName);
    }
#>
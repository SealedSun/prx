// Prexonite
// 
// Copyright (c) 2011, Christian Klauser
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
// 
//     Redistributions of source code must retain the above copyright notice, 
//          this list of conditions and the following disclaimer.
//     Redistributions in binary form must reproduce the above copyright notice, 
//          this list of conditions and the following disclaimer in the 
//          documentation and/or other materials provided with the distribution.
//     The names of the contributors may be used to endorse or 
//          promote products derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
//  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Add System::IO To Import;

function file_exists(path) = ::File.Exists(path);
function file_delete(path) = ::File.Delete(path);

function file_open(path) = ::File.OpenText(path);

declare file_open as file_open_read,
        file_open as file_open_text;

function file_open_write(path) = new ::StreamWriter(::File.OpenWrite(path), System::Text::Encoding.UTF8);

declare dispose as file_close;

function file_lines(file) =
    if(file is String)
        coroutine () =>
        {
            using(file = file_open(file))
            while((var l = file.ReadLine) is not Null)
                yield l;
        }
    else  
        coroutine () =>
        {
            while((var l = file.ReadLine) is not Null)
                yield l;
        }; 

function file_characters(file) =
    if(file is String)
        coroutine () =>
        {
            using(file = file_open(file))
            while((var c = file.Read) != -1)
                yield char(c);
        }
    else  
        coroutine () =>
        {
            while((var c = file.Read) != -1)
                yield char(c);
        };  
        
declare file_characters as file_chars;

coroutine file_words(file) does 
    foreach(var line in file_lines(file))
    foreach(var word in line.Split)
        yield word;
        
function file_change_extension(path, extension) = 
    ::Path.ChangeExtension(path~String, extension~String);
    
function file_get_extension(path) =
    ::Path.GetExtension(path~String);

function path_combine(path1, path2) =
    ::Path.Combine(path1, path2);
    
    
function directory_exists(path) =
    ::Directory.Exists(path);
    
function directory_list_files(path,pattern)
{
    pattern ??= "*.*";
    pattern ~= String;
    
    return ::Directory.GetFiles(path, pattern, ::SearchOption.TopDirectoryOnly) >> all;
}  

function directory_list_files_recursive(path,pattern)
{
    pattern ??= "*.*";
    pattern ~= String;
    
    return ::Directory.GetFiles(path, pattern, ::SearchOption.AllDirectories) >> all;
}  

function directory_list_dirs(path, pattern)
{
    pattern ??= "*";
    pattern ~= String;
    
    if(pattern == "*")
        return ::Directory.GetDirectories(path);
    else
        return ::Directory.GetDirectories(path, pattern);    
}

declare
    directory_list_dirs as directory_list_directories;

function file_copy(file, newPath, replace)
{
    ::File.Copy(file, newPath, replace ?? false);
}
    
function file_move(file, newPath, replace)
{
    if( (replace ?? false) and ::File.Exists(newPath))
        ::File.Delete(newPath);
    ::File.Move(file, newPath);
} 

function file_delete(file)
{
    ::File.Delete(file);
}

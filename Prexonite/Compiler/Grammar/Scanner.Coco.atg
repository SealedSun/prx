/*--- SCANNER ------*/

IGNORECASE

CHARACTERS
	cr			        = '\r'.
	lf			        = '\n'.
	tab			        = '\t'.
	letter		        = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnoprstuvwxyz\\_".
	digit		        = "0123456789".
	natDigit	        = digit - "0".
	hexDigit	        = digit + "ABCDEFabcdef".
	notDigit            = ANY - digit.

	char                = ANY - "'" - '\\' - lf.
	verbatimStringChar  = ANY - '"'.
	regularStringChar   = ANY - '"' - '\\' - lf.
	notNewLine          = ANY - lf .
	ws                  = " " + tab + '\u000b' + '\u000c'. /* Any character with Unicode class Zs */
	
TOKENS
		//Basic token
		at          = '@'.
		id			= letter { letter | digit }.
		lid         = letter { letter | digit } CONTEXT ( ':' ).
        ns          = letter { letter | digit } CONTEXT ( "::" ).
		
  /*--------------------------------------------------------------------------------*/
        integer =
	        ( digit {digit} | digit {digit} CONTEXT ("." notDigit)
	        | ("0x") hexDigit {hexDigit}
	        )
        .
  /*--------------------------------------------------------------------------------*/
        real =
	        digit {digit} 
	        ( "." digit {digit} 
		        [("e" ) ["+" | "-"] digit {digit} ] 
	        | ("e") ["+" | "-"] digit {digit} 
	        )
	    .
  /*--------------------------------------------------------------------------------*/
        string =
	        "\""	{ regularStringChar
				        | "\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v"
				        | "\\x" hexDigit [hexDigit] [hexDigit] [hexDigit]
				        | "\\u" hexDigit hexDigit hexDigit hexDigit [hexDigit hexDigit hexDigit hexDigit]
				        } 
	        "\""
        | "@\"" {verbatimStringChar | "\"\""} "\""
        .
        
  /*--------------------------------------------------------------------------------*/
    bitAnd = "&".
	assign = "=".
	comma  = ",".
	dec    = "--".
	div    = "/".
	dot    = ".".
	eq     = "==".
	gt     = ">".
	ge     = ">=".
	inc    = "++".
	lbrace = "{".
	lbrack = "[".
	lpar   = "(".
	lt     = "<".
	le     = "<=".
	minus  = "-".
	mod    = "mod".
	ne     = "!=".
	bitOr  = "|".
	plus   = "+".
	pow    = "^".
	rbrace = "}".
    rbrack = "]".
    rpar   = ")".
    tilde  = "~".
    times  = "*".
	//nsSeparator  = "::".
    semicolon	= ';'.
	colon  = ':'.
	doublecolon = "::".
	question = "?".
	pointer= "->".
	implementation = "=>".	              

	is			= "is".
	as          = "as".
	not			= "not".	
	enabled		= "enabled".
	disabled	= "disabled".
	function	= "function".
	command     = "command".
	true		= "true".
	false		= "false".
	asm			= "asm".
	ref 	    = "ref".
	declare		= "declare".
	build		= "build".
	return      = "return".
	in          = "in".
	to          = "to".
	add         = "add".
	continue    = "continue".
	break       = "break".
	or          = "or".
	and         = "and".
	xor         = "xor".
	label       = "label".
	goto        = "goto".
	static      = "static".
	var         = "var".
	null        = "null".
	
	if          = "if".
	unless      = "unless".
	else        = "else".
	new         = "new".
	do          = "do".
	does        = "does".
	while       = "while".
	until       = "until".
	for         = "for".
	foreach     = "foreach".
	
    anyId       = '`' letter { letter | digit }.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

/*------------------------------*/
/*---- Parser ------------------*/
PRODUCTIONS

//Stack implementation using []
build does require("struct.pxs","debug.pxs");

function create_stack() 
[debugging disabled;]
{
    var xs = [];
    var i = -1;
    
    function push does foreach(var arg in var args)
    {
        var first;
        if(first is Null)
        {
            first = false;
            continue;
        }
        
        debug(arg);
        xs.Add(arg);
        i++;
        debug(xs);
    }
    
    function pop
    {
        if(i < 0)
            throw "The stack is empty";
        var ret = xs[i];
        xs.RemoveAt(i);
        i--;
        return ret;
    }
    
    function peek
    {
        if(i < 0)
            throw "The stack is empty.";
        return xs[i];
    }
    
    function count
    {
        return i+1;
    }
    
    function clear
    {
        xs.Clear();
        i = -1;   
    }
    
    function ToString this = xs.ToString;
    function GetEnumerator this = (coroutine () =>
    {
        while(count > 0)
            yield pop;
    }).GetEnumerator;
    
    return struct;
}

function create_stack_immutable(lst)
{
    if(lst is Null)
        lst = [];
    else if(Not lst is List)
        lst = lst >> all;
    
    function push this x = create_stack_immutable([x] + lst);
    
    function count this = lst.Count;
    
    function peek this = if(lst.Count > 0) lst[0] else null;
    
    function pop (this, ref item)
    {
        if(lst.Count < 1)
            throw "Stack is empty!";
        item = lst[0];
        return create_stack_immutable(all << skip(1) << lst);
    }
    
    function ToString this = "stack $lst";
    
    return struct;
}

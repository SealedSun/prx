// Prexonite
// 
// Copyright (c) 2011, Christian Klauser
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
// 
//     Redistributions of source code must retain the above copyright notice, 
//          this list of conditions and the following disclaimer.
//     Redistributions in binary form must reproduce the above copyright notice, 
//          this list of conditions and the following disclaimer in the 
//          documentation and/or other materials provided with the distribution.
//     The names of the contributors may be used to endorse or 
//          promote products derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
//  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

build does require
(
    @"psr\file.pxs"
);

var _json_var = @"__json_data_var__";

function json_from_application(app)
{
    if(Not app.Variables.ContainsKey(_json_var))
        throw "The supplied application $(app.Id) does not contain a variable named $_json_var.";
    return app.Variables[_json_var].Value.self;
}


function json_from_string(source)
{
    var isCompiled = source.StartsWith("//PXS");
    if(Not isCompiled)
        source = "var \$$_json_var = (\n $source \n);";
    var eng = new Prexonite::Engine();
    var app = new Prexonite::Application("JSON Loading Application");
    var ldr = new Prexonite::Compiler::Loader(eng,app);
    ldr.LoadFromString(source);
    if(Not app.Variables.ContainsKey(_json_var))
        throw "The supplied application $(app.Id) does not contain a variable named $_json_var.";
    var vJSON = app.Variables[_json_var];
    app.EnsureInitialization(eng, vJSON);
    return json_from_application(app);
}

function json_from_reader(reader)
{
    return json_from_string(reader.ReadToEnd());
}

function json_from_stream(stream)
{
    using(var sr = new System::IO::StreamReader(stream))
        return json_from_reader(sr);
}

function json_from_file(path)
{
    using(var fr = file_open_text(path))
        return json_from_reader(fr);
}

declare 
    json_from_application as json_from_app
;

<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
// This is the output code from your template
// you only get syntax-highlighting here - not intellisense
using System;
using System.Reflection;
using System.Collections.Generic;
using Prexonite.Types;
using Prexonite.Compiler.Cil;

namespace Prexonite.Commands.Core.Operators{
  <# 	foreach(var op in _operators)
		{
			var className = op.PrxName;
			var argc = op.Arity == Arity.Binary ? 2 : 1;
			var errMsg = argc == 2 ? "two arguments" : "one argument";
			var baseClassName = op.Arity == Arity.Binary ? "BinaryOperatorBase" : "UnaryOperatorBase";
			#>
			
	public class <#=className#> : <#=baseClassName#>
	{
	
		#region Singleton pattern
		private <#=className#>()
		{
		}
		
		private static readonly <#=className#> _instance = new <#=className#>();
		public static <#=className#> Instance
		{
			get { return _instance; }
		}
		#endregion
		
		///<summary>
		///The alias used for the <#=op.PrxName#> operation by the compiler.
		///</summary>
		public static string DefaultAlias
		{
			get { return OperatorNames.Prexonite.<#=op.PrxName#>; }
		}
		
		#region PCommand implementation
		
		public override PValue Run(StackContext sctx, PValue[] args)
		{
			if(args.Length < <#=argc#>)
				throw new PrexoniteException("The <#=op.PrxName#> operator requires <#=errMsg#>.");

<# if(op.PrxName == "Power") { #>			
			PValue rleft,rright;
			var left = args[0];
			var right = args[1];
			if (
				!(left.TryConvertTo(sctx, PType.Real, out rleft) &&
				right.TryConvertTo(sctx, PType.Real, out rright)))
					throw new PrexoniteException("The arguments supplied to the power operator are invalid (cannot be converted to Real).");
			return System.Math.Pow(Convert.ToDouble(rleft.Value), Convert.ToDouble(rright.Value));			
<# } else if(op.Arity == Arity.Binary) { #>
			return args[0].<#=op.EnumName#>(sctx,args[1]);			
<# } else { #>			
			return args[0].<#=op.EnumName#>(sctx);			
<# } #>
		}
		
		#endregion
		
		#region CIL extension
		
		protected override MethodInfo OperationMethod
		{
			get { return <#=op.MethodName#>; }
		}
		
<# if(op.PrxName == "Power") { #>	
		public override void Implement(CompilerState state, Instruction ins, CompileTimeValue[] staticArgv, int dynamicArgc)
		{
			if(dynamicArgc >= 2)
			{
				state.EmitIgnoreArguments(dynamicArgc-2);
			}
			else if(dynamicArgc == 1)
			{
				staticArgv[0].EmitLoadAsPValue(state);
			}
			else
			{
				staticArgv[0].EmitLoadAsPValue(state);
				staticArgv[1].EmitLoadAsPValue(state);
			}
			state.EmitLoadLocal(state.SctxLocal);
            state.Il.EmitCall(System.Reflection.Emit.OpCodes.Call, OperationMethod, null);
		}
<# } #>		
		#endregion
	}
		<#
		} //end of foreach loop
#>
	
	public static class OperatorCommands
	{
		public static void AddToEngine(Engine engine)
		{
			var cs = engine.Commands;
<# foreach(var op in _operators)
{
	var className = op.PrxName;
	#>
			cs.AddEngineCommand(<#=className#>.DefaultAlias, <#=className#>.Instance);
<#
}
#>
		}
		
		private static readonly Lazy<Dictionary<string,string>> _reverseLiteralMap = 
			new Lazy<Dictionary<string,string>>(() => 
				new Dictionary<string,string>
				{
<# foreach(var op in _operators)
{
	var className = op.PrxName;
	var literal = op.Literal;
	if(literal != null)
		literal = String.Format("\"{0}\"", literal);
	else
		literal = String.Format("\"$\" + OperatorNames.Prexonite.{0}", op.PrxName); 
	#>
					{OperatorNames.Prexonite.<#=op.PrxName#>, <#=literal#>},
<#
}
#>
				}, System.Threading.LazyThreadSafetyMode.PublicationOnly);
		public static bool TryGetLiteral(string id, out string literal)
		{
			return _reverseLiteralMap.Value.TryGetValue(id, out literal);
		}
	}
}
 
<#+
    private void _generateClasses()
	{
		
	}
	
	private static readonly OpInfo[] _operators = new[]{
		new OpInfo{Literal = "(+)", PrxName = "Addition", Arity = Arity.Binary},
		new OpInfo{Literal = "(-)", PrxName = "Subtraction", Arity = Arity.Binary},
		new OpInfo{Literal = "(*)", PrxName = "Multiplication", EnumName="Multiply", Arity = Arity.Binary},
		new OpInfo{Literal = "(/)", PrxName = "Division", Arity = Arity.Binary},
		new OpInfo{Literal = null, PrxName = "Modulus", Arity = Arity.Binary},
		new OpInfo{Literal = "(^)", PrxName = "Power", Arity = Arity.Binary, MethodName = "Runtime.RaiseToPowerMethod"},
		new OpInfo{Literal = "(&)", PrxName = "BitwiseAnd", Arity = Arity.Binary},
		new OpInfo{Literal = "(|)", PrxName = "BitwiseOr", Arity = Arity.Binary},
		new OpInfo{Literal = null, PrxName = "ExclusiveOr", Arity = Arity.Binary},
		new OpInfo{Literal = "(==)", PrxName = "Equality", Arity = Arity.Binary},
		new OpInfo{Literal = "(!=)", PrxName = "Inequality", Arity = Arity.Binary},
		new OpInfo{Literal = "(>)", PrxName = "GreaterThan", Arity = Arity.Binary},
		new OpInfo{Literal = "(>=)", PrxName = "GreaterThanOrEqual", Arity = Arity.Binary},
		new OpInfo{Literal = "(<)", PrxName = "LessThan", Arity = Arity.Binary},
		new OpInfo{Literal = "(<=)", PrxName = "LessThanOrEqual", Arity = Arity.Binary},
		
		new OpInfo{Literal = "(-.)", PrxName = "UnaryNegation", Arity = Arity.Unary},
		new OpInfo{Literal = null, PrxName = "OnesComplement", Arity = Arity.Unary},
		new OpInfo{Literal = null, PrxName = "LogicalNot", Arity = Arity.Unary},
	};

	private enum Arity
	{
		Unary,
		Binary
	}
	
	private class OpInfo
	{
		public string PrxName;
		public string Literal;
		private string _customEnumName;
		public string EnumName
		{
			get { return _customEnumName ?? PrxName; }
			set { _customEnumName = value; }
		}
		private string _customMethodName;
		public string MethodName
		{
			get { return _customMethodName ?? String.Format("Compiler.Cil.Compiler.PV{0}Method",EnumName); }
			set { _customMethodName = value; }
		}
		public Arity Arity;
  	}
#>
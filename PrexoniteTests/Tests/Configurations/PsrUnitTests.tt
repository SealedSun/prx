<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
// ReSharper disable RedundantUsingDirective
using System;
using System.Reflection;
using System.Collections.Generic;
using Prexonite.Types;
using Prexonite.Compiler.Cil;
using NUnit.Framework;
// ReSharper restore RedundantUsingDirective

// ReSharper disable RedundantExplicitArrayCreation
// ReSharper disable InconsistentNaming

namespace PrexoniteTests.Tests.Configurations
{
<# 
    foreach(var testFile in _getTestConfiguration())
    { 
#>
        public abstract class Unit_<#=_toIdentifier(testFile.Item1)#> : ScriptedUnitTestContainer
        {
            [TestFixtureSetUp]
            public void SetupTestFile()
            {
                SetUpLoader();
                Runner.SetupTestFile(this, new string[] {
<#                  foreach(var fut in testFile.Item2) { #>
                        @"<#=fut#>",
<#                  } #>
                });
                LoadUnitTestingFramework();
                RequireFile(@"<#=_toTestFilePath(testFile.Item1)#>");                
                Runner.PrepareExecution(this);
            }

<#      foreach(var testCase in testFile.Item3) { #>
            [Test]
            public void <#=testCase.Replace(@"\","_").Replace("$","_").Replace("'","_")#>()
            {
                RunUnitTest(@"<#=testCase#>");
            } 
<#      } #>
        }

        [TestFixture]
        public class Unit_<#=_toIdentifier(testFile.Item1)#>_Interpreted : Unit_<#=_toIdentifier(testFile.Item1)#>
        {
            private readonly UnitTestConfiguration _runner = new UnitTestConfiguration.InMemory();
            protected override UnitTestConfiguration Runner
            {
                get 
                {
                    return _runner;
                }
            }
        }

        [TestFixture]
        public class Unit_<#=_toIdentifier(testFile.Item1)#>_CilStatic : Unit_<#=_toIdentifier(testFile.Item1)#>
        {
            private readonly UnitTestConfiguration _runner = new UnitTestConfiguration.InMemory(){CompileToCil=true};
            protected override UnitTestConfiguration Runner
            {
                get 
                {
                    return _runner;
                }
            }
        }
<# } #>
}

// ReSharper restore RedundantExplicitArrayCreation
// ReSharper restore InconsistentNaming

<#+ 
    const string ttEscape = @"..\..\";
    const string testPathPrefix = ttEscape + @"psr-tests";
    const string testConfigurationName = "testconfig.txt";
    const string testPattern = @"*.test.pxs";

    const char configSectionSep = '>';
    const char configEntrySep = '|';

    // [(test_file_name, [under_test], [test_case])] 
    IEnumerable<Tuple<string,IEnumerable<string>,IEnumerable<string>>> _getTestConfiguration()
    {
        var path =Path.GetFullPath(Host.ResolvePath(Path.Combine(testPathPrefix, testConfigurationName)));
        using(var sr = new StreamReader(
                new FileStream(path, FileMode.Open, FileAccess.Read), 
                System.Text.Encoding.UTF8))
        {
            string line = sr.ReadLine();
            while(line != null && line.Length > 2)
            {
                var fs = line.Split(new [] {configSectionSep},3);
                if(fs.Length < 3)
                    continue;

                var tfn = fs[0];
                var entrySep = new []{configEntrySep};
                var underTest = fs[1].Split(entrySep).Skip(1);
                var testCases = fs[2].Split(entrySep).Skip(1);
                yield return Tuple.Create<string,IEnumerable<string>,IEnumerable<string>>(tfn,underTest,testCases);

                line = sr.ReadLine();
            }
        }
    }

    string _toIdentifier(string testFileName)
    {
        testFileName = Path.GetFileName(testFileName);
        return testFileName.Substring(0,testFileName.Length - (testPattern.Length-1)).Replace("-","_");
    }

    string _toTestFilePath(string testFileName)
    {
        var abs = Path.GetFullPath(Host.ResolvePath(Path.Combine(testPathPrefix, testFileName)));
        var root = Path.GetFullPath(Host.ResolvePath(testPathPrefix));
        return "." + abs.Substring(root.Length);
    }   
#>
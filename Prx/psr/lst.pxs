var __c\non_lst_functions[is compiler;];
build
{
    declare var __c\non_lst_functions as lst;
    lst = [];
    foreach(var func in asm(ldr.app).Functions)
        lst[] = func;
}

declare command 
    map, where, all, sort,
    limit, skip;
declare 
    sort as orderby;

function range(index, count, xs) = xs >> skip(index) >> limit(count);

coroutine distinct xs
{
    var dict = { };
    foreach(var x in xs)
    {
        if(Not dict.ContainsKey(x))
        {
            dict.Add(x, null);
            yield x;
        }
    }
}

declare 
    distinct as unique;

coroutine union ys xs
{
    var dict = { };
    foreach(var x in xs)
    {
        if(Not dict.ContainsKey(x))
        {
            dict.Add(x, null);
            yield x;
        }
    }
    foreach(var y in ys)
    {
        if(Not dict.ContainsKey(y))
        {
            dict.Add(y, null);
            yield y;
        }
    }
}

coroutine intersect ys xs
{
    var dict = { };
    foreach(var x in xs)
        dict[x] = false;
    foreach(var y in ys)
        if(dict.ContainsKey(y))
            dict[y] = true;
    foreach(var xy in dict)
        if(xy.Value)
            yield xy.Key;   
}

coroutine except ys xs
{
    var dict = { };
    foreach(var x in xs)
        dict[x] = true;
    foreach(var y in ys)
        if(dict.ContainsKey(y))
            dict[y] = false;
    foreach(var xy in dict)
        if(xy.Value)
            yield xy.Key;  
}

coroutine takewhile(ref f, xs)
{
    var i = 0;
    foreach(var x in xs)
    {
        unless(f(x,i++))
            return;
        yield x;
    }
}

coroutine groupby(ref f, xs)
{
    var groups = { };
    foreach(var x in xs)
    {
        var fx = f(x);
        if(Not groups.ContainsKey(fx))
            groups[fx] = [x];
        else
            groups[fx].Add(x);
    }
    foreach(var g in groups)
        yield g;
}


   
/* A SAMPLE
[ 1, 6, 8, 12, 15, 20, 99 ] >> 
    where( x => x > 10) >> 
    orderby(   (b,a) => 
                if(a > b) 
                    1 
                else if(a < b) 
                    -1 
                else 
                    0
        ) >> 
    groupby( x => x mod 2 ) >> 
    select  ( g => 
                (   if(g.Key == 0) 
                        "even" 
                    else 
                        "odd"
                ): g.Value
            ) >> 
    all

is an expression that returns [ odd: [99, 15], even: [20,12]]

//*/

build
{
    declare var __c\non_lst_functions as lst;
    foreach(var func in asm(ldr.app).Functions)
        if(Not lst.Contains(func))
            func.Meta["PartOf"] = "lst";
    lst = null;
    (asm(ldr.app)).Variables.Remove(@"__c\non_lst_functions");
    getloader.Symbols.Remove(@"__c\non_lst_functions");
}
var struct\ordinalIc = System::StringComparison.OrdinalIgnoreCase;

function struct
{
    function getId(g) =
        if(g.Meta.ContainsKey("SId"))
            g.Meta["SId"].Text
        else if(g.Meta.ContainsKey("LogicalId"))
            g.Meta["LogicalId"].Text
        else
            null;
        ;
    
    var callingCtx = caller;
        
    var parentId = callingCtx.Implementation.Id;
    var methods = (asm(ldr.app).Functions) 
        >> where(f => 
            f
                .Meta["ParentFunction"]
                .Text
                .Equals(parentId, struct\ordinalIc)            
            And Not f.Meta["Private"].Switch)
        >> map(f => 
            if(Not f.Meta.ContainsKey("LogicalId"))
                (null: null)
            else
                (getId(f): callingCtx.LocalVariables[f.Meta["LogicalId"].Text].Value)
           )
        >> where(fcf => (Not fcf.Value is Null) && (Not fcf.Key is Null));
    
    var s = new Structure;

    s.\\(@"\ctorId") = () => parentId;
    
    foreach(var fcf in methods)
        s.\\(fcf.Key) = fcf.Value;
        
    return s;
}
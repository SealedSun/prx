// Prexonite
// 
// Copyright (c) 2011, Christian Klauser
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
// 
//     Redistributions of source code must retain the above copyright notice, 
//          this list of conditions and the following disclaimer.
//     Redistributions in binary form must reproduce the above copyright notice, 
//          this list of conditions and the following disclaimer in the 
//          documentation and/or other materials provided with the distribution.
//     The names of the contributors may be used to endorse or 
//          promote products derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
//  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Name prx\lib;
Description "Provides common routines for prx.";
Author SealedSun;
	
declare println as echo;

//Access to an experimental terminal
declare command __console;

//Not all environments may support colors...
var supportsColors = (supportsColors ?? true)~Bool;

//Run 'f' in a context where console output has the color 'color'.
function runInDifferentColor(ref f, color)
{
	var r;
    if(supportsColors)
    {
    	var orig = ::Console.ForegroundColor;
    	::Console.ForegroundColor = color;
    	r = f();
    	::Console.ForegroundColor = orig;
    }
    else
    {
        r = f();   
    }
    return r;
}

//Shortcuts for commonly used colorations
ref red = 
    if(supportsColors)
        f => runInDifferentColor(f, ::ConsoleColor.Red)
    else
        f => f.()
    ;
ref green = 
    if(supportsColors)
        f => runInDifferentColor(f, ::ConsoleColor.Green)
    else
        f => f.()
    ;
ref yellow =
    if(supportsColors)
        f => runInDifferentColor(f, ::ConsoleColor.Yellow)
    else
        f => f.()
    ;

var isWindowsNT = System::Environment.OSVersion.Platform~Int == System::PlatformID.Win32NT~Int; 
  
function __consoleAvailable = asm(ldr.eng).Commands.Contains("__console");
  
var supportsTabs = (supportsTabs ?? (isWindowsNT && __consoleAvailable))~Bool;
    
function readline = 
    if(supportsTabs)
        __console.ReadLine
    else
        System::Console.ReadLine;
    
//Show prompt and read line
var prompt\color; 
function showPrompt(q) does
{
	declare var prompt\color as color;
	var originalColor;
    if(q == null)
        q = "PRX> ";
    runInDifferentColor( () => print(q), 
        if(color != null) color else ::Console.ForegroundColor);
	return readline;
}

function report
{
	var r = null;
    foreach(var arg in var args)
    {
        if(arg is not Prexonite::Types::PValueKeyValuePair)
            throw "Arguments must be key value pairs!";
            
        var msg = arg.Key;
        var act = arg.Value;
        
        print("$msg...");
        r = act.();
        println("done.");
    }
    return r;
}

var prompt = null;

//Functions that provide access to the currently executing engine and application.
function thisEngine = asm ( ldr.eng );
function thisApplication = asm ( ldr.app );
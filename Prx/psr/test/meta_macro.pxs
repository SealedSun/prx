// This unit test plugin wraps test cases that need to be implemented as macros in infrastructure
// that executes the macro in an isolated environment.

function test\execute_single_macro as execute_single_macro(ldr, testMacro)
[Import {System, Prexonite, Prexonite::Types, Prexonite::Compiler, Prexonite::Compiler::Ast}]
{
    var eng = ldr.ParentEngine;
    var app = ldr.ParentApplication;

    var hostFuncId = @"test\run_single_macro\hostFunc";
    var hostFunc = app.CreateFunction(hostFuncId);
    var funcTar;
    try
    {
        //Setup function hosting the macro invocation
        var fakeFile = @"psr\test\meta_macro.pxs\test\run_single_macro\anonymous";
        funcTar = ldr.CreateFunctionTarget(hostFunc,null,null);
        var block = funcTar.Ast;

        //Setup invocation of test macro
        var invocation = new ::AstExpand(
            Prexonite::Compiler::NoSourcePosition.Instance,
            ~Object<"Prexonite.Modular.EntityRef+Function">.Create(testMacro.Id, testMacro.ParentApplication.Module.Name),
            Prexonite::Types::PCall.Get);
        block.Add(invocation);

        //Compile host function
        block.EmitCode(funcTar, true, ::StackSemantics.Effect);
        funcTar.FinishTarget();
        //technically, finishing the host function isn't necessary (the test macro has already been executed)
        //  but some errors might only be detected during finishing.
    }
    finally
    {
        foreach(var ct in ldr.FunctionTargets)
        {
            var funcId = ct.Function.Id;
            if(app.Functions.Contains(funcId))
                app.Functions.Remove(funcId);
            if(app.Module.Functions.Contains(funcId))
                app.Module.Functions.Remove(funcId);
            println("Removed function $funcId from $(app.Module.Name).");
        }
    }
}

// Runs the specified macro in its own module (linked to the current application compound)
// Will then unlink the temporary module, but return the loader used to execute the macro for inspection.
function test\run_single_macro_inspect as run_single_macro_inspect(testMacro)
[
    Add Prexonite to Imports;
    Add Prexonite::Types to Imports;
    Add Prexonite::Compiler to Imports;
    Add Prexonite::Compiler::Ast to Imports;
]
{
    while(testMacro is Structure)
        testMacro = testMacro.self;

    if(testMacro is not Prexonite::PFunction)
        throw "test\\run_single_macro expects a macro function, and not $(boxed(testMacro)).";
    if(not testMacro.IsMacro)
        throw "test\\run_single_macro expects a macro function. $testMacro is not a macro.";

    var module = Prexonite::Modular::Module.Create(new module_name("meta_macro_host_module","0.0"));
    var app = new ::Application(module);
    var eng = asm(ldr.eng);
    var testApp = asm(ldr.app);

    var ldr;
    var oldCompCount = testApp.Compound.Count;
    try {
        ::Application.Link(testApp,app);
        ldr = new ::Loader(eng, app);
        execute_single_macro(ldr, testMacro);
    } finally {
        if(app.IsLinkedTo(testApp))
            app.Unlink();
    }

    if(testApp.Compound.Count != oldCompCount)
        throw "meta_macro did not successfully restore the original application compound.";

    return ldr;
}

function test\run_single_macro as run_single_macro(testMacro)
[
    Add Prexonite to Imports;
    Add Prexonite::Types to Imports;
    Add Prexonite::Compiler to Imports;
    Add Prexonite::Compiler::Ast to Imports;
]
{
    var ldr = run_single_macro_inspect(testMacro);

    ldr.Warnings >> each(println(?));
    if(ldr.Errors.Count > 0) {
        ldr.Errors >> skip(1) >> each(println(?));
        throw ldr.Errors[0].ToString;
    }
}


// This is the filter function that will be applied to each test.
// We wrap test cases that are macros in our wrapper and leave
// all other tests intact.
function test\macro_filter as macro_filter(testFunc)
{
    if(testFunc.IsMacro)
        return run_single_macro(testFunc);
    else
        return testFunc;
}

// Register the filter function in the test-framework.
{ test\register_test_filter = macro_filter(?); }

// Prexonite
// 
// Copyright (c) 2011, Christian Klauser
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
// 
//     Redistributions of source code must retain the above copyright notice, 
//          this list of conditions and the following disclaimer.
//     Redistributions in binary form must reproduce the above copyright notice, 
//          this list of conditions and the following disclaimer in the 
//          documentation and/or other materials provided with the distribution.
//     The names of the contributors may be used to endorse or 
//          promote products derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
//  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

function create_queue(lst)
{
    if(lst is Null)
        lst = [];
    else if(Not lst is List)
        lst = lst >> all;
    
    function enqueue this x = create_queue(lst + [x]);
    
    function count this = lst.Count;
    
    function peek this = if(lst.Count > 0) lst[0] else null;
    
    function dequeue this, ref item
    {
        if(lst.Count < 1)
            throw "Queue is empty!";
        item = lst[0];
        return create_queue(all << skip(1) << lst);
    }
    
    function ToString this = "queue $lst";
    
    return struct;
}

function create_mutable_queue(lst)
{
    var q = create_queue(lst);
    
    function enqueue this
    {
        foreach(var x in var args >> skip(1))
            q = q.enqueue(x);
    }
    
    function peek this = q.peek;
    
    function count this = q.count;
    
    function dequeue this
    {
        var item;
        q = q.dequeue(->item);
        return item;
    }
    
    function clear does q = new queue;
    
    function ToString this = "mutable $q";
    
    function GetEnumerator
    {
        return q.GetEnumerator;
    }
    
    function snapshot = q;
    
    return struct;
}

declare 
    create_queue as create_immutable_queue;

function struct
{
    function getId(g) =
        if(g.Meta.ContainsKey("SId"))
            g.Meta["SId"].Text
        else if(g.Meta.ContainsKey("LogicalId"))
            g.Meta["LogicalId"].Text
        else
            throw "The function $g cannot be used in a" +
                " struct because it has no LogicalId";
        ;
    
    var parentId = caller.Implementation.Id;
    var methods = new System::Text::StringBuilder();
    var methods_f = [];
    
    foreach(var f in asm(ldr.app).Functions)
    {
        if(
            f
            .Meta["ParentFunction"]
            .Text
            .Equals(parentId, System::StringComparison.OrdinalIgnoreCase)
            And Not f.Meta["Private"].Switch
          )
        {
            var cf = caller.LocalVariables[f.Meta["LogicalId"].Text].Value;
            if(cf == null)
                continue;
            methods.Append("\"ref\", \"$(getId(f))\", ");
            methods_f[] = f: cf;
        }
    }
    if(methods.Length > 0)
        methods.Length -= 2;
    var ss;
    var s =
        asm(ldr.eng)
        .CreatePType("Structure(\"$((ss = methods.ToString).Escape)\")")
        .Construct([]~Object<"Prexonite.PValue[]">);
    if(s is Null Or s.self is Null)
        throw "Could not construct Structure<$ss>.";
    else
        s = s.self;
        
    foreach(var kv in methods_f)
    {
        var id = getId(kv.Key);
        var f = kv.Value;
        s.\\(id) = f;
    }
        
    return s;
}

under_test {
	@"psr\impl\ast.pxs",
	{@"psr\impl\macro.pxs",		@"psr\impl\ast.pxs"},
    {@"psr\impl\struct.pxs",	@"psr\impl\ast.pxs",@"psr\impl\macro.pxs"},
    {@"psr\impl\pattern.pxs",	@"psr\impl\ast.pxs",@"psr\impl\macro.pxs",@"psr\impl\struct.pxs"},
    {@"psr\impl\prop.pxs",		@"psr\impl\ast.pxs",@"psr\impl\macro.pxs"},
};
test_dependencies {@"psr\test\meta_macro.pxs"};

function test_con[test]
{
    var a = 11;
    var b = 13;

    var x = kvp(a,b);
    assert(x is Prexonite::Types::PValueKeyValuePair,"$(boxed(x)) is not a PValueKeyValuePair");
    assert_eq(x.Key,a,"Key of $(boxed(x)) doesn't match");
    assert_eq(x.Value,b,"Value of $(boxed(x)) doesn't match");

    //nested
    var c = 17;
    var d = 19;
    var x = kvp(kvp(a,b),kvp(c,d));
    assert(x is Prexonite::Types::PValueKeyValuePair,"$(boxed(x)) is not a PValueKeyValuePair (nested)");
    var xa = x.Key;
    assert(xa is Prexonite::Types::PValueKeyValuePair,"$(boxed(xa)) should be PValueKeyValuePair (key of nested)");
    assert_eq(xa.Key,a,"Key of $(boxed(xa)) doesn't match");
    assert_eq(xa.Value,b,"Value of $(boxed(xa)) doesn't match");
    var xb = x.Value;
    assert(xb is Prexonite::Types::PValueKeyValuePair,"$(boxed(xb)) should be PValueKeyValuePair (key of nested)");
    assert_eq(xb.Key,c,"Key of $(boxed(xb)) doesn't match");
    assert_eq(xb.Value,d,"Value of $(boxed(xb)) doesn't match");
}

function test_dcon[test]
{
    var a = 11;
    var b = 13;

    var p = a:b;
    kvp(var x,var y) = p;
    assert_eq(x,a,"Key doesn't match");
    assert_eq(y,b,"Value doesn't match");

    var c = 17;
    var s = new Structure;
    var mem_called = false;
    s.\\("mem") = (self,z) => {
        assert_eq(mem_called,false,"s.mem already called");
        mem_called = true;
        assert_eq(z,c,"mem arg doesn't match");
    };

    var q = p:c;

    var x = y = null;
    kvp(kvp(var x, var y),s.mem) = q;

    assert_eq(x,a,"Key doesn't match #2");
    assert_eq(y,b,"Value doesn't match #2");
    assert(mem_called,"s.mem has not been called");

}

function test_prop_simple[test]
{
    function p = prop;

    assert(p is null,"Property p should be initialized to null.");
    var a = 13;
    p(a);
    assert_eq(p,a,"Assignment to p failed.");
    p(null);
    assert(p is null,"Cannot assign null");
}

var test_prop_capset\store;

function test_prop_capset\impl(isset,x)
{
    var old = test_prop_capset\store;
    test_prop_capset\store = isset.ToString + x;
    return old;
}

macro test_prop_capset
{
    var fc = ast\call(context.Call, entityref_to(test_prop_capset\impl));
    fc.Arguments.Add(ast\const(SI.eq(context.Call,SI.set)));
    fc.Arguments.AddRange(var args);
    context.Block.Expression = fc;
}

function test_prop_proxy[test]
{
    function p = prop(test_prop_capset);

    assert(p is null,"Property p should be initialized to null.");
    var a  = 13;
    p(a);
    assert_eq(p,"True13");
    assert_eq(p,"False");
    p(null);
    assert_eq(p,"True");
    assert_eq(p,"False");
}

function test_prop_complex[test]
{
    var assert_flag = null;
    var a = 11;
    function p = prop(() =>
        {
            if(assert_flag is null)
            {
                return null;
            }
            else
            {
                assert(assert_flag,"Unexpected call to getter");
                assert_flag = false;
                return a;
            }
        },
        value =>
        {
            assert(not assert_flag~Bool,"Unexpected call to setter with $(boxed(value))");
            assert_eq(value,a,"Unexpected value");
            assert_flag = true;
        });

    assert(p is null,"Property p should be initialized to null");
    p(a);
    assert_eq(p,a);
    a += 2;
    p = a;
    assert_eq(p,a);
}

function test_prop_glob = prop;

function test_prop_simple_glob[test]
{
    declare test_prop_glob as p;

    assert(p is null,"Property p should be initialized to null.");
    var a = 13;
    p(a);
    assert_eq(p,a,"Assignment to p failed.");
    p(null);
    assert(p is null,"Cannot assign null");
}
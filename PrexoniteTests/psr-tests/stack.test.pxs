
build does require(@"psr\stack.pxs");
build does require(@"psr\test.pxs");

function tm_count[test]
{
    var a = 11;
    var b = 13;
    var c = 17;
    var d = 19;
    
    var s = new stack;
    
    assert_eq(s.Count,0,"initial count");
    s.push(a);
    assert_eq(s.Count,1,"count after push");
    s.push(b,c);
    assert_eq(s.Count,3,"count after multi-push");
    s.pop;
    assert_eq(s.Count,2,"count after pop");
    s.clear;
    assert_eq(s.Count,0,"count after clear");
}

function tm_peek[test]
{
    var a = 11;
    var b = 13;
    var c = 17;
    var d = 19;
    
    var s = new stack;
    
    assert_eq(s.Count,0,"initial count");
    s.push(a);
    assert_eq(s.peek,a,"peek after push(a)");
    s.push(b,c);
    assert_eq(s.peek,c,"peek after multi-push");
    s.pop;
    assert_eq(s.peek,b,"peek after pop");
    s.clear;
    s.push(d);
    assert_eq(s.peek,d,"peek after clear/push(d)");
}

function tm_pop[test]
{
    var a = 11;
    var b = 13;
    var c = 17;
    var d = 19;
    
    var s = new stack;
    
    assert_eq(s.Count,0,"initial count");
    s.push(a);
    assert_eq(s.peek,a,"peek after push(a)");
    s.push(b,c);
    assert_eq(s.peek,c,"peek after multi-push");
    assert_eq(s.pop,c,"pop(c)");
    assert_eq(s.peek,b,"peek after pop");
    assert_eq(s.pop,b,"pop(b)");
    assert_eq(s.count,1,"count: only 1 left (a)");
    assert_eq(s.pop,a,"pop(a)");
}

function tm_enumarte_pops[test]
{
    var a = 11;
    var b = 13;
    var c = 17;
    var d = 19;
    
    var s = new stack;
    s.push(a,b,c,d);
    assert_eq(s.count,4,"count after 4×push");
    
    s >> all >> var ss;
    assert_eq(ss.Count,4,"length of list");
    assert_eq(s.Count,0,"stack empty after enumerate");
    assert_eq(ss[0],d,"ss[0]");
    assert_eq(ss[1],c,"ss[1]");
    assert_eq(ss[2],b,"ss[2]");
    assert_eq(ss[3],a,"ss[3]");
    
    s.push(a,b);
    assert_eq(s.Count,2,"count after push(a,b)");
    s.push(c,d);
    
    foreach(var x in s)
    {
        if(x < 15)
        {
            assert_eq(x,b,"b is first < 15");
            break;
        }
        if(s.count == 3)
            assert_eq(x,d,"first element");
        else
            assert_eq(x,c,"second element");
    }
    
    assert_eq(s.Count,1,"one element left");
    assert_eq(s.Peek,a,"last element = a");
}

function ti_create[test]
{
    var a = 11; var b = 13; var c = 17; var d = 19;
    
    ref ns = new immutable_stack(?);
    assert_eq((ns).count,0,"empty stack");
    assert_eq(ns([a]).count,1,"singleton stack");
    assert_eq(ns([a]).peek,a,"peek(a)");
    assert_eq((var x = ns([a,b,c,d] >> reverse)).count,4,"4 elements");
    var z;
    var x' = x.pop(->z);
    assert_eq(z,d,"pop(d)");
    assert_eq(x'.count,x.count-1,"count of pop(d)");
    assert_eq(x'.peek,c,"peek(c)");
    z = null;
    var x'' = x'.pop(->z);
    assert_eq(z,c,"pop(c)");
    assert_eq(x''.count,x'.count-1,"count after pop(c)");
    assert_eq(x''.peek,b,"peek(b)");
    z = null;
    var x''' = x''.pop(->z);
    assert_eq(z,b,"pop(b)");
    assert_eq(x'''.count,x''.count-1,"count after pop(b)");
    assert_eq(x'''.count,1,"count after pop(b) const");
    assert_eq(x'''.peek,a,"$(x''').peek(a)");
    z = null;
    var x4 = x'''.pop(->z);
    assert_eq(z,a,"pop(a)");
    assert_eq(x4.count,0,"count after pop(a)");
    assert(x4.peek is null,"peek(b)=$(boxed(x4.peek)) is null");
}

function ti_pushpop[test]
{
    var a = 11; var b = 13; var c = 17; var d = 19;
    ref nil = new immutable_stack(?);
    
    assert_eq(nil.push(a).count,1,"push(a).count == 1");
    assert_eq(nil.push(a).push(b).count,2,"push(a).push(b).count == 2");
    assert_eq(nil.push(a).push(b).peek,b,"peek(b)");
    var z = null;
    assert_eq(nil.push(a).push(b).pop(->z).peek,a,"pop(b).peek(a)");
    assert_eq(z,b,"pop(b)");
    var z = null;
    assert_eq(nil.push(a).push(b).pop.pop(->z).count,0,"pop(b).pop(a).count");
    assert_eq(z,a,"pop(a)");
}

function ti_nonserial[test]
{
    var a = 11; var b = 13; var c = 17; var d = 19;
    ref nil = new immutable_stack(?);
    
    assert_eq((var x = nil.push(a)).count,1,"push(a).count == 1");
    assert_eq((var y1 = x.push(b)).count,2,"push(a).push(b).count == 2");
    assert_eq(y1.peek,b,"peek(b)");
    var z = null;
    assert_eq(y1.pop(->z).peek,a,"pop(b).peek(a)");
    assert_eq(z,b,"pop(b)");
    
    var z = null;
    assert_eq((var y2 = x.push(c)).count,2,"push(a).push(c).count == 2");
    assert_eq(y2.peek,c,"peek(c)");
    assert_eq(y2.pop(->z).peek,a,"push(a).push(c).pop.peek(a)");
    assert_eq(z,c,"pop(c)");
    
    var z = null;
    assert_eq(y1.pop.pop(->z).count,0,"pop(b).pop(a).count");
    assert_eq(z,a,"pop(a)");
}
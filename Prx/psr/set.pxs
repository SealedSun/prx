// Prexonite
// 
// Copyright (c) 2011, Christian Klauser
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
// 
//     Redistributions of source code must retain the above copyright notice, 
//          this list of conditions and the following disclaimer.
//     Redistributions in binary form must reproduce the above copyright notice, 
//          this list of conditions and the following disclaimer in the 
//          documentation and/or other materials provided with the distribution.
//     The names of the contributors may be used to endorse or 
//          promote products derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
//  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


build does require = @"psr\struct.pxs";

function create_set as create_mutable_set()
{
    var tag = true;
    
    var store = {};
    foreach(var arg in var args)
        foreach(var x in arg)
            store[x] = tag;
    
    function add(this) =
        (var new args) >> skip(1) >>
            each(arg => store[arg] = tag);
    
    function remove(this) = 
        (var new args) >> skip(1) >>
            forall(arg => store.Remove(arg));
            
    function contains(this) =  
        (var new args) >> skip(1) >>
            forall(arg => { return store.ContainsKey(arg); });
        
    function count =
        store.Count;
        
    function GetEnumerator =
        store.Keys.GetEnumerator;   
        
    function ToString(this)
    {
        var sb = new System::Text::StringBuilder("{ ");
        var commaRequired = false;
        foreach(var kvp in store)
        {
            if(commaRequired)
                sb.Append(", ");
            else
                commaRequired = true;
            sb.append(kvp.Key);
        }
        if(commaRequired)
            sb.Append(" }");
        else
            sb.Append("}");
            
        return sb;
    }    
        
    return struct;    
}

function create_immutable_set(elements)
{
    elements = if(elements is Null) [] else (all << distinct << elements); //all makes a copy
    
    function add(this) = 
        append(var new args >> skip(1), elements) >> create_immutable_set;
        
    function remove(this) =
        elements >> except((var new args) >> skip(1)) >> create_immutable_set;
        
    function contains(this) =
        (var new args) >> skip(1) >>
            forall(arg => elements.Contains(arg));
            
    function count = 
        elements.Count; 
        
    function GetEnumerator =
        elements.GetEnumerator;
        
    function ToString(this) =
        elements.ToString;        
        
    return struct;                   
}

declare create_immutable_set as create_iset;

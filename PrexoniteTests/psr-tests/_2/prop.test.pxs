name psr::prop::test/2.0;
references {
    psr::test,
    psr::prop,
    psr::ast,
    psr::$macro
};

namespace import 
    sys.*,
    psr.test.assertions.*,
    psr.prop.*,
    psr.ast,
    psr.ast.SI,
    psr.$macro.ast,
    sys.ct.entityref_to,
    sys.rt.boxed;

function test_prop_simple[test]
{
    function p = prop;

    assert(p is null,"Property p should be initialized to null.");
    var a = 13;
    p(a);
    assert_eq(p,a,"Assignment to p failed.");
    p(null);
    assert(p is null,"Cannot assign null");
}

var test_prop_capset\store;

function test_prop_capset\impl(isset,x)
{
    var old = test_prop_capset\store;
    test_prop_capset\store = isset.ToString + x;
    return old;
}

macro test_prop_capset
{
    var fc = ast.call(context.Call, entityref_to(test_prop_capset\impl));
    fc.Arguments.Add(ast.const(SI.eq(context.Call,SI.set)));
    fc.Arguments.AddRange(var args);
    context.Block.Expression = fc;
}

function test_prop_proxy[test]
{
    function p = prop(test_prop_capset);

    assert(p is null,"Property p should be initialized to null.");
    var a  = 13;
    p(a);
    assert_eq(p,"True13");
    assert_eq(p,"False");
    p(null);
    assert_eq(p,"True");
    assert_eq(p,"False");
}

function test_prop_complex[test]
{
    var assert_flag = null;
    var a = 11;
    function p = prop(() =>
        {
            if(assert_flag is null)
            {
                return null;
            }
            else
            {
                assert(assert_flag,"Unexpected call to getter");
                assert_flag = false;
                return a;
            }
        },
        value =>
        {
            assert(not assert_flag~Bool,"Unexpected call to setter with $(boxed(value))");
            assert_eq(value,a,"Unexpected value");
            assert_flag = true;
        });

    assert(p is null,"Property p should be initialized to null");
    p(a);
    assert_eq(p,a);
    a += 2;
    p = a;
    assert_eq(p,a);
}

function test_prop_glob = prop;

function test_prop_simple_glob[test]
{
    declare test_prop_glob as p;

    assert(p is null,"Property p should be initialized to null.");
    var a = 13;
    p(a);
    assert_eq(p,a,"Assignment to p failed.");
    p(null);
    assert(p is null,"Cannot assign null");
}

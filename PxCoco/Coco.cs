/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

/*
 * THIS IS A MODIFIED VERSION!
 * I, Christian "SealedSun" Klauser <sealedsun AT gmail DOT com>, have modified 
 * CoCo/R to better fit my needs. The code generator now uses the symbolic
 * constants whenever possible.
 * 
 * To distinguish CoCo/R and from my version, I called my executable PxCoco.exe
 */

/*-------------------------------------------------------------------------
  Trace output options
  0 | A: prints the states of the scanner automaton
  1 | F: prints the First and Follow sets of all nonterminals
  2 | G: prints the syntax graph of the productions
  3 | I: traces the computation of the First sets
  4 | J: prints the sets associated with ANYs and synchronisation sets
  6 | S: prints the symbol table (terminals, nonterminals, pragmas)
  7 | X: prints a cross reference list of all syntax symbols
  8 | P: prints statistics about the Coco run
  
  Trace output can be switched on by the pragma
    $ { digit | letter }
  in the attributed grammar or as a command-line option
  -------------------------------------------------------------------------*/

using System;
using System.IO;

// ReSharper disable CheckNamespace
namespace at.jku.ssw.Coco {
    public static partial class Coco {

    public static bool Generate(GeneratorOptions generatorOptions)
    {
        try
        {
            var pos = generatorOptions.SrcName.LastIndexOf('/');
            if (pos < 0) pos = generatorOptions.SrcName.LastIndexOf('\\');
            var file = generatorOptions.SrcName;
            var srcDir = generatorOptions.SrcName.Substring(0, pos + 1);

            var scanner = new Scanner(file);
            var parser = new Parser(scanner);

            var traceFileName = srcDir + "trace.txt";
            parser.trace = new StreamWriter(new FileStream(traceFileName, FileMode.Create));
            parser.tab = new Tab(parser);
            parser.dfa = new DFA(parser);
            parser.pgen = new ParserGen(parser)
            {
                DirectDebug = generatorOptions.DirectDebug, 
                RelativePathRoot = generatorOptions.RelativePathRoot
            };

            parser.tab.srcName = generatorOptions.SrcName;
            parser.tab.srcDir = srcDir;
            parser.tab.nsName = generatorOptions.Namespace;
            parser.tab.frameDir = generatorOptions.FrameDirectoryPath;
            if (generatorOptions.DirectDebugTrace != null) parser.tab.SetDDT(generatorOptions.DirectDebugTrace);

            parser.errors.WriteMessage = generatorOptions.WriteMessage;
            parser.errors.WriteError = generatorOptions.WriteError;

            parser.errors.realFile = generatorOptions.SrcName;

            parser.Parse();

            parser.trace.Close();
            var f = new FileInfo(traceFileName);
            if (f.Length == 0) f.Delete();
            else generatorOptions.WriteMessage("trace output is in " + traceFileName);
            generatorOptions.WriteMessage($"{parser.errors.count} errors detected");
            return parser.errors.count <= 0;
        }
        catch (IOException ex)
        {
            generatorOptions.WriteError(ex.Message);
            return false;
        }
        catch (FatalError ex)
        {
            generatorOptions.WriteError(ex.Message);
            return false;
        }
    }

	public static void Main (string[] arg) {      
        Console.WriteLine("PxCoco/R (Jun 30, 2019), based on Coco/R (Sep 19, 2006)");

        if (arg.Length > 0 && arg[0] == "-merge")
        {
            MergeCommandLine(arg);
            return;
        }

        var opts = new GeneratorOptions(Console.WriteLine, ex => Console.WriteLine("-- " + ex));

		for (var i = 0; i < arg.Length; i++)
        {
            switch (arg[i])
            {
                case "-namespace" when i < arg.Length - 1:
                    opts.Namespace = arg[++i];
                    break;
                case "-frames" when i < arg.Length - 1:
                    opts.FrameDirectoryPath = arg[++i];
                    break;
                case "-trace" when i < arg.Length - 1:
                    opts.DirectDebugTrace = arg[++i];
                    break;
                case "-relative" when i < arg.Length - 1:
                    opts.RelativePathRoot = arg[++i];
                    break;
                case "-d":
                    opts.DirectDebug = true;
                    break;
                default:
                    opts.SrcName = arg[i];
                    break;
            }
        }
		if (arg.Length > 0 && opts.SrcName != null) {
            Generate(opts);
		} else {
            //No arguments supplied -> display help message
			Console.WriteLine("Usage: {0}\t- PxCoco Grammar.ATG {{Option}}{0}\t- PxCoco -merge {{grammar.atg}} output.atg{0}" +
			                  "Options:{0}" +
			                  "  -namespace <namespaceName>{0}" +
			                  "  -frames    <frameFilesDirectory>{0}" +
			                  "  -trace     <traceString>{0}" +
                              "  -relative  <pathRoot>{0}" +
			                  "Valid characters in the trace string:{0}" +
			                  "  A  trace automaton{0}" +
			                  "  F  list first/follow sets{0}" +
			                  "  G  print syntax graph{0}" +
			                  "  I  trace computation of first sets{0}" +
			                  "  J  list ANY and SYNC sets{0}" +
			                  "  P  print statistics{0}" +
			                  "  S  list symbol table{0}" +
			                  "  X  list cross reference table{0}" +
			                  "Scanner.frame and Parser.frame files needed in ATG directory{0}" +
                        "or in a directory specified in the -frames option.",
			                  Environment.NewLine);
		}
	}
		
} // end Coco

} // end namespace
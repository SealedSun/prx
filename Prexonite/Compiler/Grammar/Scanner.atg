/*
 * Prexonite, a scripting engine (Scripting Language -> Bytecode -> Virtual Machine)
 *  Copyright (C) 2007  Christian "SealedSun" Klauser
 *  E-mail  sealedsun a.t gmail d.ot com
 *  Web     http://www.sealedsun.ch/
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  Please contact me (sealedsun a.t gmail do.t com) if you need a different license.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/*---- SCANNER ------*/
/* Interface version */

IGNORECASE
	
TOKENS
		//Basic token
		id
		anyId
		lid
        ns
		
  /*--------------------------------------------------------------------------------*/
        integer
  /*--------------------------------------------------------------------------------*/
        real
  /*--------------------------------------------------------------------------------*/
        string
        
  /*--------------------------------------------------------------------------------*/
    bitAnd // &
	assign // =
	comma  // ,
	dec    // --
	div    // /
	dot    // .
	eq     // ==
	gt     // >
	ge     // >=
	inc    // ++
	lbrace // {
	lbrack // [
	lpar   // (
	lt     // <
	le     // <=
	minus  // -
	ne     // !=
	bitOr  // |
	plus   // +
	pow    // ^
	rbrace // }
    rbrack // ]
    rpar   // )
    tilde  // ~
    times  // *
    semicolon // ;
	colon  // :
	doublecolon // ::
	coalescence	//??
	question // ?
	pointer// ->
	implementation // =>
	at     // @
	appendleft // <<
	appendright // >>
	

    //Handled by the scanner:
    var
    ref
    true
	false

    //Handled by keyword check
    BEGINKEYWORDS
    mod
	is
	as
	not
	enabled
	disabled
	function
	command	
	asm	
	declare
	build
	return
	in
	to
	add
	continue
	break
	yield
	or
	and
	xor
	label
	goto
	static	
	null	
	if
	unless
	else
	new
	coroutine
	from
	do
	does
	while
	until
	for
	foreach
	try
	catch
	finally
	throw
    then
	uusing //Coco/R does not accept "using" as a token name.
	macro
	lazy
	let
	ENDKEYWORDS
	
    //SPECIAL
    LPopExpr //has no textual representation.

IGNORE '\r' + '\n' + '\t'

/*------------------------------*/
/*---- Parser ------------------*/
PRODUCTIONS
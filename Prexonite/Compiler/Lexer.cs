/* The following code was generated by CSFlex 1.4 on 04.09.2010 */

#line 1 "Prexonite.lex"
/*
 * Prexonite, a scripting engine (Scripting Language -> Bytecode -> Virtual Machine)
 *  Copyright (C) 2007  Christian "SealedSun" Klauser
 *  E-mail  sealedsun a.t gmail d.ot com
 *  Web     http://www.sealedsun.ch/
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  Please contact me (sealedsun a.t gmail do.t com) if you need a different license.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

//Prexonite Scanner file.

using System;
using System.Text;
using System.IO;
using Prexonite;
using Prexonite.Types;
using Prexonite.Commands;
using Prexonite.Compiler;
using Prexonite.Compiler.Ast;

partial

#line default
/**
 * This class is a scanner generated by <a href="http://www.sourceforge.net/projects/csflex/">C# Flex</a>, based on
 * <a href="http://www.jflex.de/">JFlex</a>, version 1.4
 * on 04.09.2010 from the specification file
 * <tt>Prexonite.lex</tt>
 */
class Lexer: IScanner {

  /** This character denotes the end of file */
  public const int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private const int ZZ_BUFFERSIZE = 16384;
  /**
   * This is used in 'if' statements to eliminate dead code
   * warnings for 'break;' after the end of a user action
   * block of code. The Java version does this by emitting
   * a second 'case' which is impossible to reach. Since this
   * is impossible for the compiler to deduce during semantic
   * analysis, the warning is stifled. However, C# does not
   * permit 'case' blocks to flow into each other, so the C#
   * output mode needs a different approach. In this case,
   * the entire user code is wrapped up in an 'if' statement
   * whose condition is always true. No warning is emitted
   * because the compiler doesn't strictly propagate the value
   * of 'static readonly' fields, and thus does not semantically
   * detect the fact that the 'if' will always be true.
   */
   public static readonly bool ZZ_SPURIOUS_WARNINGS_SUCK = true;

  /** lexical states */
  public const int VerbatimString = 3;
  public const int Local = 6;
  public const int VerbatimBlock = 5;
  public const int YYINITIAL = 0;
  public const int SmartString = 2;
  public const int Asm = 7;
  public const int String = 1;
  public const int SmartVerbatimString = 4;
  static Lexer()
  {
    ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    ZZ_ACTION = zzUnpackAction();
    ZZ_ROWMAP = zzUnpackRowMap();
    ZZ_TRANS = zzUnpackTrans();
    ZZ_ATTRIBUTE = zzUnpackAttribute();
  }


  /** 
   * Translates characters to character classes
   */
  private static readonly ushort[] ZZ_CMAP_PACKED = new ushort[] {
    9, 8, 1, 13, 1, 10, 1, 11, 1, 11, 1, 9, 14, 8, 4, 0, 1, 13, 1, 42,
    1, 14, 1, 0, 1, 15, 1, 0, 1, 39, 1, 0, 1, 35, 1, 36, 1, 17, 1, 4,
    1, 50, 1, 5, 1, 23, 1, 16, 1, 24, 9, 1, 1, 32, 1, 49, 1, 44, 1, 41,
    1, 43, 1, 48, 1, 22, 1, 29, 1, 51, 1, 2, 1, 20, 1, 3, 1, 28, 5, 6,
    1, 30, 1, 37, 1, 52, 1, 19, 2, 6, 1, 26, 1, 21, 1, 18, 1, 27, 1, 31,
    1, 6, 1, 25, 2, 6, 1, 34, 1, 7, 1, 45, 1, 38, 1, 6, 1, 0, 1, 29,
    1, 51, 1, 2, 1, 20, 1, 3, 1, 28, 5, 6, 1, 30, 1, 37, 1, 52, 1, 19,
    2, 6, 1, 26, 1, 21, 1, 18, 1, 27, 1, 31, 1, 6, 1, 25, 2, 6, 1, 33,
    1, 40, 1, 46, 1, 47, 6, 8, 1, 12, 26, 8, 2, 0, 4, 6, 4, 0, 1, 6,
    7, 0, 2, 8, 1, 0, 1, 6, 3, 0, 1, 8, 1, 6, 5, 0, 23, 6, 1, 0,
    31, 6, 1, 0, 0x0128, 6, 2, 0, 18, 6, 28, 0, 94, 6, 2, 0, 9, 6, 2, 0,
    7, 6, 14, 0, 2, 6, 14, 0, 5, 6, 9, 0, 1, 6, 17, 0, 70, 8, 26, 0,
    2, 8, 24, 0, 1, 6, 11, 0, 1, 6, 1, 0, 3, 6, 1, 0, 1, 6, 1, 0,
    20, 6, 1, 0, 44, 6, 1, 0, 8, 6, 2, 0, 26, 6, 12, 0, 130, 6, 1, 0,
    4, 8, 5, 0, 57, 6, 2, 0, 2, 6, 2, 0, 2, 6, 3, 0, 38, 6, 2, 0,
    2, 6, 55, 0, 38, 6, 2, 0, 1, 6, 7, 0, 39, 6, 9, 0, 41, 8, 1, 0,
    3, 8, 1, 0, 1, 8, 1, 0, 2, 8, 1, 0, 1, 8, 11, 0, 27, 6, 5, 0,
    3, 6, 46, 0, 26, 6, 5, 0, 11, 6, 8, 8, 13, 0, 10, 8, 6, 0, 1, 8,
    99, 6, 1, 0, 1, 6, 7, 8, 2, 0, 6, 8, 2, 6, 2, 8, 1, 0, 4, 8,
    2, 0, 10, 8, 3, 6, 19, 0, 1, 6, 1, 0, 27, 6, 83, 0, 38, 6, 0x015b, 0,
    3, 8, 1, 0, 53, 6, 2, 0, 1, 8, 1, 6, 16, 8, 2, 0, 1, 6, 4, 8,
    3, 0, 10, 6, 2, 8, 2, 0, 10, 8, 17, 0, 3, 8, 1, 0, 8, 6, 2, 0,
    2, 6, 2, 0, 22, 6, 1, 0, 7, 6, 1, 0, 1, 6, 3, 0, 4, 6, 2, 0,
    1, 8, 1, 0, 7, 8, 2, 0, 2, 8, 2, 0, 3, 8, 9, 0, 1, 8, 4, 0,
    2, 6, 1, 0, 3, 6, 2, 8, 2, 0, 10, 8, 4, 6, 4, 8, 1, 0, 1, 8,
    8, 0, 1, 8, 2, 0, 6, 6, 4, 0, 2, 6, 2, 0, 22, 6, 1, 0, 7, 6,
    1, 0, 2, 6, 1, 0, 2, 6, 1, 0, 2, 6, 2, 0, 1, 8, 1, 0, 5, 8,
    4, 0, 2, 8, 2, 0, 3, 8, 11, 0, 4, 6, 1, 0, 1, 6, 7, 0, 12, 8,
    3, 6, 12, 0, 3, 8, 1, 0, 7, 6, 1, 0, 1, 6, 1, 0, 3, 6, 1, 0,
    22, 6, 1, 0, 7, 6, 1, 0, 2, 6, 1, 0, 5, 6, 2, 0, 1, 8, 1, 6,
    8, 8, 1, 0, 3, 8, 1, 0, 3, 8, 2, 0, 1, 6, 15, 0, 1, 6, 5, 0,
    10, 8, 17, 0, 3, 8, 1, 0, 8, 6, 2, 0, 2, 6, 2, 0, 22, 6, 1, 0,
    7, 6, 1, 0, 2, 6, 2, 0, 4, 6, 2, 0, 1, 8, 1, 6, 6, 8, 3, 0,
    7, 8, 8, 0, 2, 8, 4, 0, 2, 6, 1, 0, 3, 6, 4, 0, 10, 8, 18, 0,
    2, 8, 1, 0, 6, 6, 3, 0, 3, 6, 1, 0, 4, 6, 3, 0, 2, 6, 1, 0,
    1, 6, 1, 0, 2, 6, 3, 0, 2, 6, 3, 0, 3, 6, 3, 0, 8, 6, 1, 0,
    3, 6, 4, 0, 71, 8, 8, 6, 1, 8, 3, 6, 1, 8, 23, 6, 1, 8, 10, 6,
    1, 8, 5, 6, 11, 8, 1, 0, 3, 8, 1, 0, 4, 8, 7, 0, 2, 8, 9, 0,
    2, 6, 4, 0, 10, 8, 18, 0, 2, 8, 1, 0, 8, 6, 1, 0, 3, 6, 1, 0,
    23, 6, 1, 0, 10, 6, 1, 0, 5, 6, 4, 0, 7, 8, 1, 0, 3, 8, 1, 0,
    4, 8, 7, 0, 2, 8, 7, 0, 1, 6, 1, 0, 2, 6, 4, 0, 10, 8, 18, 0,
    2, 8, 1, 0, 8, 6, 1, 0, 3, 6, 1, 0, 23, 6, 1, 0, 16, 6, 4, 0,
    6, 8, 2, 0, 3, 8, 1, 0, 4, 8, 9, 0, 1, 8, 8, 0, 2, 6, 4, 0,
    10, 8, 21, 0, 18, 6, 3, 0, 24, 6, 1, 0, 9, 6, 1, 0, 1, 6, 2, 0,
    7, 6, 58, 0, 48, 6, 1, 8, 2, 6, 7, 8, 4, 0, 8, 6, 8, 8, 1, 0,
    10, 8, 39, 0, 2, 6, 1, 0, 1, 6, 2, 0, 2, 6, 1, 0, 1, 6, 2, 0,
    1, 6, 6, 0, 4, 6, 1, 0, 7, 6, 1, 0, 3, 6, 1, 0, 1, 6, 1, 0,
    1, 6, 2, 0, 2, 6, 1, 0, 4, 6, 1, 8, 2, 6, 6, 8, 1, 0, 2, 8,
    1, 6, 2, 0, 5, 6, 1, 0, 1, 6, 1, 0, 6, 8, 2, 0, 10, 8, 2, 0,
    2, 6, 34, 0, 1, 6, 23, 0, 2, 8, 6, 0, 10, 8, 11, 0, 1, 8, 1, 0,
    1, 8, 1, 0, 1, 8, 4, 0, 2, 8, 8, 6, 1, 0, 34, 6, 6, 0, 23, 8,
    4, 6, 4, 0, 6, 8, 1, 0, 1, 8, 1, 0, 21, 8, 3, 0, 7, 8, 1, 0,
    1, 8, 70, 0, 34, 6, 1, 0, 5, 6, 1, 0, 2, 6, 37, 0, 6, 6, 74, 0,
    38, 6, 10, 0, 39, 6, 9, 0, 90, 6, 5, 0, 68, 6, 5, 0, 82, 6, 6, 0,
    7, 6, 1, 0, 63, 6, 1, 0, 1, 6, 1, 0, 4, 6, 2, 0, 7, 6, 1, 0,
    1, 6, 1, 0, 4, 6, 2, 0, 39, 6, 1, 0, 1, 6, 1, 0, 4, 6, 2, 0,
    31, 6, 1, 0, 1, 6, 1, 0, 4, 6, 2, 0, 7, 6, 1, 0, 1, 6, 1, 0,
    4, 6, 2, 0, 7, 6, 1, 0, 7, 6, 1, 0, 23, 6, 1, 0, 31, 6, 1, 0,
    1, 6, 1, 0, 4, 6, 2, 0, 7, 6, 1, 0, 39, 6, 1, 0, 19, 6, 69, 0,
    85, 6, 12, 0, 0x026c, 6, 2, 0, 8, 6, 10, 0, 26, 6, 5, 0, 75, 6, 149, 0,
    52, 6, 108, 0, 88, 6, 8, 0, 41, 6, 0x0557, 0, 156, 6, 4, 0, 90, 6, 6, 0,
    22, 6, 2, 0, 6, 6, 2, 0, 38, 6, 2, 0, 6, 6, 2, 0, 8, 6, 1, 0,
    1, 6, 1, 0, 1, 6, 1, 0, 1, 6, 1, 0, 31, 6, 2, 0, 53, 6, 1, 0,
    7, 6, 1, 0, 1, 6, 3, 0, 3, 6, 1, 0, 7, 6, 3, 0, 4, 6, 2, 0,
    6, 6, 4, 0, 13, 6, 5, 0, 3, 6, 1, 0, 7, 6, 15, 0, 4, 8, 24, 0,
    1, 11, 1, 11, 5, 8, 16, 0, 2, 6, 41, 0, 7, 8, 3, 0, 6, 8, 5, 0,
    1, 6, 10, 8, 22, 0, 12, 6, 36, 0, 13, 8, 4, 0, 1, 8, 32, 0, 1, 6,
    4, 0, 1, 6, 2, 0, 10, 6, 1, 0, 1, 6, 3, 0, 5, 6, 6, 0, 1, 6,
    1, 0, 1, 6, 1, 0, 1, 6, 1, 0, 4, 6, 1, 0, 3, 6, 1, 0, 7, 6,
    37, 0, 36, 8, 0x02dd, 0, 60, 8, 78, 0, 1, 8, 0x028b, 0, 30, 8, 0x0871, 0, 2, 6,
    1, 8, 25, 0, 15, 8, 1, 0, 5, 6, 11, 0, 84, 6, 4, 0, 2, 8, 2, 0,
    2, 6, 2, 0, 90, 6, 1, 0, 3, 6, 6, 0, 40, 6, 4, 0, 94, 6, 17, 0,
    24, 6, 200, 0, 10, 8, 0x0176, 0, 0x19b6, 6, 74, 0, 0x51a6, 6, 90, 0, 0x048d, 6, 0x0773, 0,
    0x2ba4, 6, 0x215c, 0, 0x012e, 6, 210, 0, 7, 6, 12, 0, 5, 6, 5, 0, 1, 6, 1, 0,
    10, 6, 1, 0, 13, 6, 1, 0, 5, 6, 1, 0, 1, 6, 1, 0, 2, 6, 1, 0,
    2, 6, 1, 0, 108, 6, 33, 0, 0x016b, 6, 18, 0, 64, 6, 2, 0, 54, 6, 40, 0,
    12, 6, 55, 0, 2, 6, 24, 0, 3, 6, 25, 0, 1, 6, 6, 0, 3, 6, 1, 0,
    1, 6, 1, 0, 135, 6, 2, 0, 1, 8, 4, 0, 1, 6, 11, 0, 10, 8, 7, 0,
    26, 6, 4, 0, 1, 6, 1, 0, 26, 6, 11, 0, 89, 6, 3, 0, 6, 6, 2, 0,
    6, 6, 2, 0, 6, 6, 2, 0, 3, 6, 3, 0, 2, 6, 3, 0, 2, 6, 25, 0, 0 };

  /** 
   * Translates characters to character classes
   */
  private static readonly char[] ZZ_CMAP;

  /** 
   * Translates DFA states to action switch labels.
   */
  private static readonly int [] ZZ_ACTION;

  private static readonly ushort[] ZZ_ACTION_PACKED_0 = new ushort[] {
    8, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7,
    1, 3, 1, 8, 1, 9, 2, 3, 1, 10, 1, 11, 1, 2, 3, 3,
    1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19,
    1, 20, 1, 1, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26,
    1, 27, 1, 28, 1, 29, 2, 30, 1, 31, 1, 32, 1, 33, 2, 34,
    1, 35, 1, 34, 1, 36, 1, 37, 1, 38, 1, 39, 1, 40, 1, 30,
    1, 41, 1, 3, 1, 10, 3, 0, 1, 42, 1, 43, 1, 44, 1, 45,
    2, 0, 1, 46, 2, 3, 1, 47, 1, 0, 3, 3, 1, 48, 13, 0,
    1, 49, 1, 50, 1, 51, 1, 52, 1, 53, 1, 54, 1, 55, 1, 56,
    1, 57, 1, 58, 1, 59, 1, 60, 1, 61, 1, 62, 1, 0, 1, 63,
    1, 0, 1, 64, 1, 65, 1, 66, 1, 67, 1, 68, 1, 69, 1, 70,
    1, 71, 1, 72, 1, 73, 1, 0, 1, 74, 1, 0, 1, 75, 1, 76,
    1, 77, 1, 78, 1, 79, 1, 80, 1, 81, 1, 82, 1, 83, 1, 84,
    1, 85, 1, 86, 1, 87, 1, 0, 1, 87, 1, 88, 2, 6, 1, 0,
    2, 3, 1, 2, 1, 89, 1, 3, 1, 90, 1, 0, 1, 91, 2, 0,
    1, 92, 1, 93, 1, 94, 2, 0, 1, 95, 1, 96, 1, 97, 2, 0,
    1, 98, 1, 0, 1, 99, 1, 0, 1, 100, 1, 0, 1, 101, 1, 0,
    1, 102, 1, 103, 1, 3, 1, 104, 1, 105, 1, 106, 2, 0, 1, 107,
    1, 108, 1, 109, 1, 110, 1, 100, 1, 0, 1, 101, 1, 0, 1, 111,
    1, 112, 1, 113, 1, 100, 1, 0, 1, 101, 1, 0, 2, 100, 2, 101,
    6, 0, 0 };

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static readonly int [] ZZ_ROWMAP;

  private static readonly ushort[] ZZ_ROWMAP_PACKED_0 = new ushort[] {
    0, 0, 0, 53, 0, 106, 0, 159, 0, 212, 0, 0x0109, 0, 0x013e, 0, 0x0173,
    0, 0x01a8, 0, 0x01dd, 0, 0x0212, 0, 0x0247, 0, 0x027c, 0, 0x02b1, 0, 0x01a8, 0, 0x02e6,
    0, 0x031b, 0, 0x01a8, 0, 0x0350, 0, 0x0385, 0, 0x03ba, 0, 0x01a8, 0, 0x03ef, 0, 0x0424,
    0, 0x0459, 0, 0x048e, 0, 0x04c3, 0, 0x01a8, 0, 0x01a8, 0, 0x04f8, 0, 0x01a8, 0, 0x01a8,
    0, 0x052d, 0, 0x0562, 0, 0x0597, 0, 0x05cc, 0, 0x0601, 0, 0x0636, 0, 0x01a8, 0, 0x01a8,
    0, 0x01a8, 0, 0x066b, 0, 0x01a8, 0, 0x01a8, 0, 0x06a0, 0, 0x06d5, 0, 0x01a8, 0, 0x01a8,
    0, 0x01a8, 0, 0x070a, 0, 0x073f, 0, 0x01a8, 0, 0x01a8, 0, 0x0774, 0, 0x01a8, 0, 0x07a9,
    0, 0x01a8, 0, 0x01a8, 0, 0x07de, 0, 0x0813, 0, 0x01a8, 0, 0x0848, 0, 0x087d, 0, 0x08b2,
    0, 0x08e7, 0, 0x091c, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x0951, 0, 0x0986, 0, 0x09bb,
    0, 0x0212, 0, 0x09f0, 0, 0x0a25, 0, 0x01a8, 0, 0x0a5a, 0, 0x0a8f, 0, 0x0ac4, 0, 0x0af9,
    0, 0x01a8, 0, 0x0b2e, 0, 0x0b63, 0, 0x0b98, 0, 0x0bcd, 0, 0x0c02, 0, 0x0c37, 0, 0x0c6c,
    0, 0x0ca1, 0, 0x0cd6, 0, 0x0d0b, 0, 0x0d40, 0, 0x0d75, 0, 0x0daa, 0, 0x01a8, 0, 0x01a8,
    0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8,
    0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x0ddf, 0, 0x01a8, 0, 0x0e14, 0, 0x01a8,
    0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8,
    0, 0x01a8, 0, 0x0e49, 0, 0x01a8, 0, 0x0e7e, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8,
    0, 0x01a8, 0, 0x0eb3, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x0ee8, 0, 0x01a8, 0, 0x01a8,
    0, 0x0f1d, 0, 0x0f1d, 0, 0x0f52, 0, 0x01a8, 0, 0x0f87, 0, 0x01a8, 0, 0x0fbc, 0, 0x0ff1,
    0, 0x1026, 0, 0x0a5a, 0, 0x0212, 0, 0x105b, 0, 0x0212, 0, 0x1090, 0, 0x01a8, 0, 0x10c5,
    0, 0x10fa, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x112f, 0, 0x1164, 0, 0x01a8, 0, 0x01a8,
    0, 0x01a8, 0, 0x1199, 0, 0x11ce, 0, 0x01a8, 0, 0x1203, 0, 0x01a8, 0, 0x1238, 0, 0x126d,
    0, 0x12a2, 0, 0x12d7, 0, 0x130c, 0, 0x0212, 0, 0x0212, 0, 0x1341, 0, 0x01a8, 0, 0x01a8,
    0, 0x01a8, 0, 0x1376, 0, 0x13ab, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x01a8, 0, 0x13e0,
    0, 0x1415, 0, 0x144a, 0, 0x147f, 0, 0x0212, 0, 0x01a8, 0, 0x01a8, 0, 0x14b4, 0, 0x14e9,
    0, 0x151e, 0, 0x1553, 0, 0x01a8, 0, 0x1588, 0, 0x01a8, 0, 0x15bd, 0, 0x15f2, 0, 0x1627,
    0, 0x165c, 0, 0x1691, 0, 0x14b4, 0, 0x151e, 0 };

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(ushort[] packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int high = packed[i++] << 16;
      result[j++] = high | packed[i++];
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static readonly int [] ZZ_TRANS;

  private static readonly ushort[] ZZ_TRANS_PACKED_0 = new ushort[] {
    1, 9, 1, 10, 2, 11, 1, 12, 1, 13, 2, 11, 1, 9, 5, 14,
    1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 11, 1, 20, 1, 11,
    1, 21, 1, 22, 1, 23, 1, 11, 1, 24, 1, 11, 1, 25, 2, 11,
    1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 11, 1, 32,
    1, 33, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39, 1, 40,
    1, 41, 1, 42, 1, 43, 1, 44, 2, 11, 7, 45, 1, 46, 1, 45,
    4, 47, 1, 45, 1, 48, 1, 49, 37, 45, 7, 50, 1, 51, 1, 50,
    4, 52, 1, 50, 1, 53, 1, 54, 37, 50, 14, 55, 1, 56, 1, 57,
    37, 55, 14, 58, 1, 59, 1, 60, 37, 58, 53, 47, 1, 9, 1, 10,
    2, 11, 1, 12, 1, 13, 2, 11, 1, 9, 5, 14, 1, 61, 1, 16,
    1, 17, 1, 18, 1, 62, 1, 11, 1, 20, 1, 11, 1, 63, 1, 22,
    1, 23, 1, 11, 1, 24, 1, 11, 1, 25, 2, 11, 1, 26, 1, 27,
    1, 28, 1, 29, 1, 30, 1, 31, 1, 11, 1, 32, 1, 33, 1, 34,
    1, 35, 1, 36, 1, 37, 1, 38, 1, 39, 1, 40, 1, 41, 1, 42,
    1, 43, 1, 44, 2, 11, 1, 9, 1, 10, 2, 11, 1, 12, 1, 13,
    2, 11, 1, 9, 5, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 62,
    3, 11, 1, 21, 1, 22, 1, 23, 1, 11, 1, 24, 1, 11, 1, 25,
    2, 11, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 11,
    1, 32, 1, 33, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39,
    1, 40, 1, 41, 1, 42, 1, 43, 1, 44, 2, 11, 54, 0, 1, 10,
    1, 0, 1, 64, 19, 0, 1, 65, 1, 10, 29, 0, 3, 11, 2, 0,
    3, 11, 3, 0, 1, 11, 2, 0, 1, 11, 2, 0, 4, 11, 2, 0,
    8, 11, 1, 66, 4, 0, 1, 11, 13, 0, 2, 11, 4, 0, 1, 67,
    53, 0, 1, 68, 37, 0, 1, 69, 18, 0, 5, 14, 40, 0, 1, 11,
    2, 70, 2, 0, 2, 70, 1, 11, 3, 0, 1, 11, 2, 0, 1, 70,
    2, 0, 4, 70, 2, 0, 1, 11, 7, 70, 1, 66, 4, 0, 1, 70,
    13, 0, 2, 70, 16, 0, 1, 71, 1, 72, 36, 0, 3, 11, 2, 0,
    3, 11, 3, 0, 1, 11, 2, 0, 1, 11, 2, 0, 1, 11, 1, 73,
    2, 11, 2, 0, 2, 11, 1, 74, 5, 11, 1, 66, 4, 0, 1, 11,
    13, 0, 2, 11, 1, 0, 3, 11, 2, 0, 3, 11, 3, 0, 1, 11,
    2, 0, 1, 11, 2, 0, 1, 11, 1, 75, 2, 11, 2, 0, 8, 11,
    1, 66, 4, 0, 1, 11, 13, 0, 2, 11, 14, 0, 1, 76, 39, 0,
    1, 10, 1, 0, 1, 64, 19, 0, 1, 65, 1, 10, 1, 77, 28, 0,
    2, 11, 1, 78, 2, 0, 3, 11, 3, 0, 1, 11, 2, 0, 1, 11,
    2, 0, 4, 11, 2, 0, 8, 11, 1, 66, 4, 0, 1, 11, 13, 0,
    2, 11, 1, 0, 3, 11, 2, 0, 3, 11, 3, 0, 1, 11, 2, 0,
    1, 11, 2, 0, 4, 11, 2, 0, 5, 11, 1, 79, 2, 11, 1, 66,
    4, 0, 1, 11, 13, 0, 2, 11, 1, 0, 3, 11, 2, 0, 3, 11,
    3, 0, 1, 11, 2, 0, 1, 11, 2, 0, 4, 11, 2, 0, 5, 11,
    1, 80, 2, 11, 1, 66, 4, 0, 1, 11, 13, 0, 2, 11, 32, 0,
    1, 81, 24, 0, 1, 82, 1, 83, 10, 0, 1, 84, 1, 85, 7, 0,
    1, 86, 11, 0, 1, 87, 1, 88, 1, 89, 1, 90, 1, 91, 1, 92,
    1, 93, 1, 94, 47, 0, 1, 95, 53, 0, 1, 96, 53, 0, 1, 97,
    1, 0, 1, 98, 50, 0, 1, 99, 52, 0, 1, 100, 1, 0, 1, 101,
    50, 0, 1, 102, 2, 0, 1, 103, 56, 0, 1, 104, 4, 0, 7, 45,
    1, 0, 1, 45, 4, 0, 1, 45, 2, 0, 37, 45, 7, 0, 1, 105,
    6, 0, 1, 106, 1, 49, 2, 0, 1, 107, 5, 0, 1, 108, 1, 109,
    1, 110, 1, 111, 1, 112, 1, 113, 1, 0, 1, 114, 19, 0, 1, 115,
    1, 116, 7, 50, 1, 0, 1, 50, 4, 0, 1, 50, 2, 0, 37, 50,
    7, 0, 1, 117, 6, 0, 1, 118, 1, 119, 2, 0, 1, 120, 5, 0,
    1, 121, 1, 122, 1, 123, 1, 124, 1, 125, 1, 126, 1, 0, 1, 127,
    19, 0, 1, 128, 1, 129, 2, 0, 2, 130, 2, 0, 2, 130, 7, 0,
    1, 130, 2, 0, 4, 130, 3, 0, 7, 130, 3, 0, 1, 131, 1, 0,
    1, 130, 13, 0, 2, 130, 14, 0, 1, 132, 52, 0, 1, 133, 40, 0,
    2, 134, 2, 0, 2, 134, 7, 0, 1, 134, 2, 0, 4, 134, 3, 0,
    7, 134, 3, 0, 1, 135, 1, 0, 1, 134, 13, 0, 2, 134, 1, 0,
    3, 11, 2, 0, 3, 11, 3, 0, 1, 11, 2, 0, 1, 11, 2, 0,
    4, 11, 2, 0, 2, 11, 1, 74, 5, 11, 1, 66, 4, 0, 1, 11,
    13, 0, 2, 11, 14, 0, 1, 136, 39, 0, 1, 137, 2, 0, 2, 138,
    18, 0, 1, 137, 29, 0, 1, 139, 22, 0, 1, 139, 60, 0, 1, 140,
    21, 0, 3, 70, 2, 0, 3, 70, 3, 0, 1, 70, 2, 0, 1, 70,
    2, 0, 4, 70, 2, 0, 8, 70, 1, 66, 4, 0, 1, 70, 13, 0,
    2, 70, 9, 71, 1, 141, 3, 142, 40, 71, 17, 72, 1, 143, 35, 72,
    1, 0, 3, 11, 2, 0, 3, 11, 3, 0, 1, 11, 2, 0, 1, 11,
    2, 0, 4, 11, 2, 0, 3, 11, 1, 144, 4, 11, 1, 66, 4, 0,
    1, 11, 13, 0, 2, 11, 1, 0, 2, 11, 1, 145, 2, 0, 3, 11,
    3, 0, 1, 11, 2, 0, 1, 11, 2, 0, 4, 11, 2, 0, 8, 11,
    1, 66, 4, 0, 1, 11, 13, 0, 2, 11, 1, 0, 3, 146, 16, 0,
    1, 146, 3, 0, 1, 146, 3, 0, 2, 146, 21, 0, 1, 146, 2, 0,
    3, 11, 2, 0, 3, 11, 3, 0, 1, 11, 2, 0, 1, 11, 2, 0,
    4, 11, 2, 0, 4, 11, 1, 147, 3, 11, 1, 66, 4, 0, 1, 11,
    13, 0, 2, 11, 1, 0, 3, 11, 2, 0, 3, 11, 3, 0, 1, 11,
    2, 0, 1, 11, 2, 0, 4, 11, 2, 0, 6, 11, 1, 148, 1, 11,
    1, 66, 4, 0, 1, 11, 13, 0, 2, 11, 1, 0, 3, 11, 2, 0,
    3, 11, 3, 0, 1, 11, 2, 0, 1, 11, 2, 0, 4, 11, 2, 0,
    2, 11, 1, 149, 5, 11, 1, 66, 4, 0, 1, 11, 13, 0, 2, 11,
    4, 0, 1, 150, 31, 0, 1, 151, 21, 0, 1, 152, 17, 0, 1, 153,
    12, 0, 1, 154, 52, 0, 1, 155, 52, 0, 1, 156, 35, 0, 1, 157,
    52, 0, 1, 158, 69, 0, 1, 159, 52, 0, 1, 160, 52, 0, 1, 161,
    57, 0, 1, 162, 52, 0, 1, 163, 47, 0, 1, 164, 4, 0, 1, 165,
    47, 0, 1, 166, 4, 0, 1, 167, 12, 0, 3, 168, 16, 0, 1, 168,
    3, 0, 1, 168, 3, 0, 2, 168, 21, 0, 1, 168, 2, 0, 3, 169,
    16, 0, 1, 169, 3, 0, 1, 169, 3, 0, 2, 169, 21, 0, 1, 169,
    2, 0, 3, 170, 16, 0, 1, 170, 3, 0, 1, 170, 3, 0, 2, 170,
    21, 0, 1, 170, 2, 0, 3, 171, 16, 0, 1, 171, 3, 0, 1, 171,
    3, 0, 2, 171, 21, 0, 1, 171, 2, 0, 3, 130, 2, 0, 3, 130,
    3, 0, 1, 130, 2, 0, 1, 130, 2, 0, 4, 130, 2, 0, 8, 130,
    5, 0, 1, 130, 13, 0, 2, 130, 1, 0, 3, 134, 2, 0, 3, 134,
    3, 0, 1, 134, 2, 0, 1, 134, 2, 0, 4, 134, 2, 0, 8, 134,
    5, 0, 1, 134, 13, 0, 2, 134, 1, 0, 1, 137, 22, 0, 1, 137,
    29, 0, 1, 139, 1, 0, 1, 64, 20, 0, 1, 139, 38, 0, 1, 142,
    42, 0, 16, 72, 1, 142, 1, 143, 35, 72, 1, 0, 2, 11, 1, 172,
    2, 0, 3, 11, 3, 0, 1, 11, 2, 0, 1, 11, 2, 0, 4, 11,
    2, 0, 8, 11, 1, 66, 4, 0, 1, 11, 13, 0, 2, 11, 1, 0,
    3, 11, 2, 0, 3, 11, 3, 0, 1, 11, 2, 0, 1, 11, 2, 0,
    3, 11, 1, 173, 2, 0, 8, 11, 1, 66, 4, 0, 1, 11, 13, 0,
    2, 11, 1, 0, 3, 11, 2, 0, 3, 11, 3, 0, 1, 11, 2, 0,
    1, 11, 2, 0, 3, 11, 1, 174, 2, 0, 8, 11, 1, 66, 4, 0,
    1, 11, 13, 0, 2, 11, 36, 0, 1, 175, 52, 0, 1, 176, 52, 0,
    1, 177, 42, 0, 1, 178, 46, 0, 1, 179, 68, 0, 1, 180, 52, 0,
    1, 181, 52, 0, 1, 182, 52, 0, 1, 183, 17, 0, 3, 184, 16, 0,
    1, 184, 3, 0, 1, 184, 3, 0, 2, 184, 21, 0, 1, 184, 2, 0,
    3, 185, 16, 0, 1, 185, 3, 0, 1, 185, 3, 0, 2, 185, 21, 0,
    1, 185, 2, 0, 3, 186, 16, 0, 1, 186, 3, 0, 1, 186, 3, 0,
    2, 186, 21, 0, 1, 186, 2, 0, 3, 187, 16, 0, 1, 187, 3, 0,
    1, 187, 3, 0, 2, 187, 21, 0, 1, 187, 2, 0, 2, 11, 1, 188,
    2, 0, 3, 11, 3, 0, 1, 11, 2, 0, 1, 11, 2, 0, 4, 11,
    2, 0, 8, 11, 1, 66, 4, 0, 1, 11, 13, 0, 2, 11, 36, 0,
    1, 189, 52, 0, 1, 190, 17, 0, 3, 191, 16, 0, 1, 191, 3, 0,
    1, 191, 3, 0, 2, 191, 21, 0, 1, 191, 2, 0, 3, 192, 16, 0,
    1, 192, 3, 0, 1, 192, 3, 0, 2, 192, 21, 0, 1, 192, 2, 0,
    3, 193, 16, 0, 1, 193, 3, 0, 1, 193, 3, 0, 2, 193, 21, 0,
    1, 193, 2, 0, 3, 194, 16, 0, 1, 194, 3, 0, 1, 194, 3, 0,
    2, 194, 21, 0, 1, 194, 2, 0, 3, 195, 16, 0, 1, 195, 3, 0,
    1, 195, 3, 0, 2, 195, 21, 0, 1, 195, 2, 0, 3, 196, 16, 0,
    1, 196, 3, 0, 1, 196, 3, 0, 2, 196, 21, 0, 1, 196, 2, 0,
    3, 197, 16, 0, 1, 197, 3, 0, 1, 197, 3, 0, 2, 197, 21, 0,
    1, 197, 2, 0, 3, 198, 16, 0, 1, 198, 3, 0, 1, 198, 3, 0,
    2, 198, 21, 0, 1, 198, 2, 0, 3, 199, 16, 0, 1, 199, 3, 0,
    1, 199, 3, 0, 2, 199, 21, 0, 1, 199, 2, 0, 3, 200, 16, 0,
    1, 200, 3, 0, 1, 200, 3, 0, 2, 200, 21, 0, 1, 200, 2, 0,
    3, 201, 16, 0, 1, 201, 3, 0, 1, 201, 3, 0, 2, 201, 21, 0,
    1, 201, 2, 0, 3, 202, 16, 0, 1, 202, 3, 0, 1, 202, 3, 0,
    2, 202, 21, 0, 1, 202, 2, 0, 3, 203, 16, 0, 1, 203, 3, 0,
    1, 203, 3, 0, 2, 203, 21, 0, 1, 203, 2, 0, 3, 204, 16, 0,
    1, 204, 3, 0, 1, 204, 3, 0, 2, 204, 21, 0, 1, 204, 1, 0, 0 };

  private static int [] zzUnpackTrans() {
    int [] result = new int[5830];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private const int ZZ_UNKNOWN_ERROR = 0;
  private const int ZZ_NO_MATCH = 1;
  private const int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static readonly String[] ZZ_ERROR_MSG = new string[] {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static readonly int [] ZZ_ATTRIBUTE;

  private static readonly ushort[] ZZ_ATTRIBUTE_PACKED_0 = new ushort[] {
    8, 0, 1, 9, 5, 1, 1, 9, 2, 1, 1, 9, 3, 1, 1, 9,
    5, 1, 2, 9, 1, 1, 2, 9, 6, 1, 3, 9, 1, 1, 2, 9,
    2, 1, 3, 9, 2, 1, 2, 9, 1, 1, 1, 9, 1, 1, 2, 9,
    2, 1, 1, 9, 2, 1, 3, 0, 3, 9, 1, 1, 2, 0, 3, 1,
    1, 9, 1, 0, 3, 1, 1, 9, 13, 0, 14, 9, 1, 0, 1, 9,
    1, 0, 10, 9, 1, 0, 1, 9, 1, 0, 5, 9, 1, 1, 3, 9,
    1, 1, 2, 9, 1, 1, 1, 0, 1, 1, 1, 9, 1, 1, 1, 9,
    1, 0, 6, 1, 1, 0, 1, 9, 2, 0, 3, 9, 2, 0, 3, 9,
    2, 0, 1, 9, 1, 0, 1, 9, 1, 0, 1, 1, 1, 0, 1, 1,
    1, 0, 3, 1, 3, 9, 2, 0, 4, 9, 1, 1, 1, 0, 1, 1,
    1, 0, 1, 1, 2, 9, 1, 1, 1, 0, 1, 1, 1, 0, 1, 9,
    1, 1, 1, 9, 1, 1, 6, 0, 0 };

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private System.IO.TextReader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private bool zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private bool zzAtEOF;


  /** the stack of open (nested) input streams to read from */
  private System.Collections.Stack zzStreams = new System.Collections.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private sealed class ZzFlexStreamInfo {
    public System.IO.TextReader zzReader;
    public int zzEndRead;
    public int zzStartRead;
    public int zzCurrentPos;
    public int zzMarkedPos;
    public int zzPushbackPos;
    public int yyline;
    public int yycolumn;
    public char [] zzBuffer;
    public bool zzAtEOF;

    /** sets all values stored in this class */
    public ZzFlexStreamInfo(System.IO.TextReader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, int zzPushbackPos,
                  char [] zzBuffer, bool zzAtEOF, int yyline, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzPushbackPos = zzPushbackPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }


  /**
   * Creates a new scanner
   * There is also a System.IO.Stream version of this constructor.
   *
   * @param   in  the System.IO.TextReader to read input from.
   */
  internal Lexer(TextReader @in) {
    this.zzReader = @in;
  }

  /**
   * Creates a new scanner.
   * There is also TextReader version of this constructor.
   *
   * @param   in  the System.IO.Stream to read input from.
   */
  internal Lexer(Stream @in) : this(new StreamReader(@in))
  {
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(ushort[] packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1600) {
      int  count = packed[i++];
      char value = (char)packed[i++];
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   System.IO.IOException  if any I/O-Error occurs
   */
  private bool zzRefill() {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      Array.Copy(zzBuffer, zzStartRead,
                 zzBuffer, 0,
                 zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.Length) {
      /* if not: blow it up */
      char[] newBuffer = new char[zzCurrentPos*2];
      Array.Copy(zzBuffer, 0, newBuffer, 0, zzBuffer.Length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.Read(zzBuffer, zzEndRead,
                                            zzBuffer.Length-zzEndRead);

    if (numRead <= 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public void yyclose() {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.Close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public void yypushStream(TextReader reader) {
    zzStreams.Push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzPushbackPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws System.InvalidOperationException
   *         if there is no further stream to read from.
   *
   * @throws System.IO.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(TextReader)
   */
  public void yypopStream() {
    zzReader.Close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.Pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos ;
    zzPushbackPos = s.zzPushbackPos;
    zzAtEOF       = s.zzAtEOF;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public bool yymoreStreams() {
    return zzStreams.Count != 0;
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(System.IO.TextReader)
   * @see #yypopStream()
   */
  public void yyreset(System.IO.TextReader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex/CSFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (IndexOutOfRangeException) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Exception(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   System.IO.IOException  if any I/O-Error occurs
   */
  public Token Scan() {
    int zzInput = 0;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      yychar+= zzMarkedPosL-zzStartRead;

      bool zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
          break;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        bool zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          bool eof = zzRefill();
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


        while (true) {
          goto zzForAction_skip;
        zzForAction: break;
        zzForAction_skip:
          if (!ZZ_SPURIOUS_WARNINGS_SUCK) goto zzForAction;
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            goto zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            bool eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
            goto zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) goto zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) goto zzForAction;
          }

        }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 134 "Prexonite.lex"
              return tok(Parser._lpar); 
#line default
          }
          break;
        case 100: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 192 "Prexonite.lex"
                                                                                                          buffer.Append(unescape_char(yytext())); 
#line default
          }
          break;
        case 16: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 135 "Prexonite.lex"
              return tok(Parser._rpar); 
#line default
          }
          break;
        case 45: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 109 "Prexonite.lex"
                           return tok(Parser._id, yytext().Substring(1)); 
#line default
          }
          break;
        case 66: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 188 "Prexonite.lex"
                  buffer.Append("\v"); 
#line default
          }
          break;
        case 105: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 133 "Prexonite.lex"
              return tok(Parser._id,OperatorNames.Prexonite.Decrement); 
#line default
          }
          break;
        case 31: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 175 "Prexonite.lex"
                  PopState();
                  ret(tok(Parser._string, buffer.ToString()));
                  buffer.Length = 0;
                
#line default
          }
          break;
        case 33: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 202 "Prexonite.lex"
                           buffer.Append(yytext()); 
#line default
          }
          break;
        case 103: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 74 "Prexonite.lex"
              return tok(Parser._does); 
#line default
          }
          break;
        case 30: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 282 "Prexonite.lex"
                  throw new PrexoniteException(System.String.Format("Invalid character \"{0}\" detected on line {1} in {2}.", yytext(), yyline, File)); 
#line default
          }
          break;
        case 13: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 114 "Prexonite.lex"
              return tok(Parser._lbrace); 
#line default
          }
          break;
        case 7: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 79 "Prexonite.lex"
                    buffer.Length = 0; PushState(String); 
#line default
          }
          break;
        case 74: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 210 "Prexonite.lex"
                  buffer.Append("\r"); 
#line default
          }
          break;
        case 86: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 86 "Prexonite.lex"
                  buffer.Length = 0; PushState(SmartVerbatimString); 
#line default
          }
          break;
        case 14: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 115 "Prexonite.lex"
              return tok(Parser._lbrack); 
#line default
          }
          break;
        case 109: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 128 "Prexonite.lex"
              return tok(Parser._id,OperatorNames.Prexonite.GreaterThanOrEqual); 
#line default
          }
          break;
        case 72: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 212 "Prexonite.lex"
                  buffer.Append("\t"); 
#line default
          }
          break;
        case 41: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 85 "Prexonite.lex"
                  buffer.Length = 0; PushState(SmartString); 
#line default
          }
          break;
        case 9: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 140 "Prexonite.lex"
              return tok(Parser._times); 
#line default
          }
          break;
        case 101: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 215 "Prexonite.lex"
                                                                                                          buffer.Append(unescape_char(yytext())); 
#line default
          }
          break;
        case 20: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 143 "Prexonite.lex"
              return tok(Parser._assign); 
#line default
          }
          break;
        case 26: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 160 "Prexonite.lex"
              return tok(Parser._question); 
#line default
          }
          break;
        case 78: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 207 "Prexonite.lex"
                  buffer.Append("\b"); 
#line default
          }
          break;
        case 65: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 183 "Prexonite.lex"
                  buffer.Append("\a"); 
#line default
          }
          break;
        case 64: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 185 "Prexonite.lex"
                  buffer.Append("\f"); 
#line default
          }
          break;
        case 12: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 163 "Prexonite.lex"
              return tok(Parser._colon); 
#line default
          }
          break;
        case 8: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 141 "Prexonite.lex"
              return tok(Parser._div); 
#line default
          }
          break;
        case 42: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 155 "Prexonite.lex"
              return tok(Parser._inc); 
#line default
          }
          break;
        case 19: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 147 "Prexonite.lex"
              return tok(Parser._bitOr); 
#line default
          }
          break;
        case 79: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 209 "Prexonite.lex"
                  buffer.Append("\n"); 
#line default
          }
          break;
        case 24: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 137 "Prexonite.lex"
              return tok(Parser._rbrace); 
#line default
          }
          break;
        case 84: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 258 "Prexonite.lex"
                        string fragment = buffer.ToString();
                        buffer.Length = 0;
                        return multiple(
                            tok(Parser._string, fragment),
                            tok(Parser._plus),
                            tok(Parser._id,yytext().Substring(1)),
                            tok(Parser._plus)
                        );
                     
#line default
          }
          break;
        case 113: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 120 "Prexonite.lex"
                            return tok(Parser._id,OperatorNames.Prexonite.Modulus); 
#line default
          }
          break;
        case 90: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 102 "Prexonite.lex"
              return tok(Parser._var); 
#line default
          }
          break;
        case 23: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 136 "Prexonite.lex"
              return tok(Parser._rbrack); 
#line default
          }
          break;
        case 6: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 93 "Prexonite.lex"
                  /* Comment/Whitespace: ignore */ 
#line default
          }
          break;
        case 25: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 157 "Prexonite.lex"
              return tok(Parser._tilde); 
#line default
          }
          break;
        case 80: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 217 "Prexonite.lex"
                        string fragment = buffer.ToString();
                        buffer.Length = 0;
                        return multiple(
                            tok(Parser._string, fragment),
                            tok(Parser._plus),
                            tok(Parser._id,yytext().Substring(1)),
                            tok(Parser._plus)
                        );
                     
#line default
          }
          break;
        case 59: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 180 "Prexonite.lex"
                  buffer.Append("\\"); 
#line default
          }
          break;
        case 2: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 98 "Prexonite.lex"
                                  return tok(Parser._integer, yytext()); 
#line default
          }
          break;
        case 82: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 246 "Prexonite.lex"
                  buffer.Append("\""); 
#line default
          }
          break;
        case 48: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 158 "Prexonite.lex"
              return tok(Parser._doublecolon); 
#line default
          }
          break;
        case 29: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 179 "Prexonite.lex"
                           buffer.Append(yytext()); 
#line default
          }
          break;
        case 40: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 252 "Prexonite.lex"
                  PopState();
                  ret(tok(Parser._string, buffer.ToString()));
                  buffer.Length = 0;
                
#line default
          }
          break;
        case 55: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 168 "Prexonite.lex"
           return tok(Parser._appendright); 
#line default
          }
          break;
        case 73: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 205 "Prexonite.lex"
                  buffer.Append("\0"); 
#line default
          }
          break;
        case 50: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 146 "Prexonite.lex"
              return tok(Parser._or); 
#line default
          }
          break;
        case 89: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 103 "Prexonite.lex"
              return tok(Parser._ref); 
#line default
          }
          break;
        case 111: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 101 "Prexonite.lex"
               return tok(Parser._false); 
#line default
          }
          break;
        case 102: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 100 "Prexonite.lex"
              return tok(Parser._true); 
#line default
          }
          break;
        case 4: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 138 "Prexonite.lex"
              return tok(Parser._plus); 
#line default
          }
          break;
        case 57: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 169 "Prexonite.lex"
           return tok(Parser._appendleft); 
#line default
          }
          break;
        case 98: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 127 "Prexonite.lex"
             return tok(Parser._id,OperatorNames.Prexonite.GreaterThan); 
#line default
          }
          break;
        case 94: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 118 "Prexonite.lex"
             return tok(Parser._id,OperatorNames.Prexonite.Multiplication); 
#line default
          }
          break;
        case 106: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 131 "Prexonite.lex"
              return tok(Parser._id,OperatorNames.Prexonite.UnaryNegation); 
#line default
          }
          break;
        case 60: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 181 "Prexonite.lex"
                  buffer.Append("\""); 
#line default
          }
          break;
        case 51: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 149 "Prexonite.lex"
              return tok(Parser._eq); 
#line default
          }
          break;
        case 43: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 156 "Prexonite.lex"
              return tok(Parser._dec); 
#line default
          }
          break;
        case 88: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 105 "Prexonite.lex"
                         string ns = yytext();
                         return tok(Parser._ns, ns.Substring(0, ns.Length-2)); 
#line default
          }
          break;
        case 36: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 245 "Prexonite.lex"
                                  buffer.Append(yytext()); 
#line default
          }
          break;
        case 28: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 165 "Prexonite.lex"
              return tok(Parser._comma); 
#line default
          }
          break;
        case 46: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 70 "Prexonite.lex"
                  return tok(Parser._to); 
#line default
          }
          break;
        case 32: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 194 "Prexonite.lex"
                          buffer.Append("$"); 
#line default
          }
          break;
        case 92: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 117 "Prexonite.lex"
             return tok(Parser._id,OperatorNames.Prexonite.Subtraction); 
#line default
          }
          break;
        case 34: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 237 "Prexonite.lex"
                  throw new PrexoniteException("Invalid smart string character '" + yytext() + "' (ASCII " + ((int)yytext()[0]) + ") in input on line " + yyline + "."); 
#line default
          }
          break;
        case 44: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 161 "Prexonite.lex"
              return tok(Parser._pointer); 
#line default
          }
          break;
        case 49: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 145 "Prexonite.lex"
              return tok(Parser._and); 
#line default
          }
          break;
        case 87: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 95 "Prexonite.lex"
                                                            return tok(Parser._real, yytext()); 
#line default
          }
          break;
        case 56: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 153 "Prexonite.lex"
              return tok(Parser._le); 
#line default
          }
          break;
        case 47: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 80 "Prexonite.lex"
                    buffer.Length = 0; PushState(VerbatimString); 
#line default
          }
          break;
        case 81: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 226 "Prexonite.lex"
                        string fragment = buffer.ToString(); 
                        buffer.Length = 0;
                        PushState(Local);
                        return multiple(
                            tok(Parser._string, fragment),
                            tok(Parser._plus),
                            tok(Parser._LPopExpr),
                            tok(Parser._lpar)
                            //2nd plus is injected by the parser
                        );
                     
#line default
          }
          break;
        case 37: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 241 "Prexonite.lex"
                  PopState();
                  ret(tok(Parser._string, buffer.ToString()));
                  buffer.Length = 0;
                
#line default
          }
          break;
        case 54: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 152 "Prexonite.lex"
              return tok(Parser._ge); 
#line default
          }
          break;
        case 71: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 216 "Prexonite.lex"
                  buffer.Append("$"); 
#line default
          }
          break;
        case 108: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 126 "Prexonite.lex"
              return tok(Parser._id,OperatorNames.Prexonite.Inequality); 
#line default
          }
          break;
        case 22: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 154 "Prexonite.lex"
              return tok(Parser._lt); 
#line default
          }
          break;
        case 63: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 187 "Prexonite.lex"
                  buffer.Append("\r"); 
#line default
          }
          break;
        case 27: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 164 "Prexonite.lex"
              return tok(Parser._semicolon); 
#line default
          }
          break;
        case 58: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 159 "Prexonite.lex"
           return tok(Parser._coalescence); 
#line default
          }
          break;
        case 85: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 267 "Prexonite.lex"
                        string fragment = buffer.ToString(); 
                        buffer.Length = 0;
                        PushState(Local);
                        return multiple(
                            tok(Parser._string, fragment),
                            tok(Parser._plus),
                            tok(Parser._LPopExpr),
                            tok(Parser._lpar)
                            //2nd plus is injected by the parser
                        );
                     
#line default
          }
          break;
        case 77: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 211 "Prexonite.lex"
                  buffer.Append("\v"); 
#line default
          }
          break;
        case 21: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 151 "Prexonite.lex"
              return tok(Parser._gt); 
#line default
          }
          break;
        case 61: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 189 "Prexonite.lex"
                  buffer.Append("\t"); 
#line default
          }
          break;
        case 107: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 125 "Prexonite.lex"
              return tok(Parser._id,OperatorNames.Prexonite.Equality); 
#line default
          }
          break;
        case 67: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 184 "Prexonite.lex"
                  buffer.Append("\b"); 
#line default
          }
          break;
        case 1: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 171 "Prexonite.lex"
              Console.WriteLine("Rogue Character: \"{0}\"", yytext()); 
#line default
          }
          break;
        case 99: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 129 "Prexonite.lex"
             return tok(Parser._id,OperatorNames.Prexonite.LessThan); 
#line default
          }
          break;
        case 76: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 206 "Prexonite.lex"
                  buffer.Append("\a"); 
#line default
          }
          break;
        case 75: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 208 "Prexonite.lex"
                  buffer.Append("\f"); 
#line default
          }
          break;
        case 97: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 123 "Prexonite.lex"
             return tok(Parser._id,OperatorNames.Prexonite.BitwiseOr); 
#line default
          }
          break;
        case 5: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 139 "Prexonite.lex"
              return tok(Parser._minus); 
#line default
          }
          break;
        case 53: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 150 "Prexonite.lex"
              return tok(Parser._ne); 
#line default
          }
          break;
        case 39: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 256 "Prexonite.lex"
                                  buffer.Append(yytext()); 
#line default
          }
          break;
        case 68: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 186 "Prexonite.lex"
                  buffer.Append("\n"); 
#line default
          }
          break;
        case 91: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 116 "Prexonite.lex"
             return tok(Parser._id,OperatorNames.Prexonite.Addition); 
#line default
          }
          break;
        case 83: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 257 "Prexonite.lex"
                  buffer.Append("\""); 
#line default
          }
          break;
        case 52: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 162 "Prexonite.lex"
              return tok(Parser._implementation); 
#line default
          }
          break;
        case 11: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 166 "Prexonite.lex"
              return tok(Parser._dot); 
#line default
          }
          break;
        case 3: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 111 "Prexonite.lex"
                    return tok(checkKeyword(yytext()), yytext()); 
#line default
          }
          break;
        case 95: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 121 "Prexonite.lex"
             return tok(Parser._id,OperatorNames.Prexonite.Power); 
#line default
          }
          break;
        case 17: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 142 "Prexonite.lex"
              return tok(Parser._pow); 
#line default
          }
          break;
        case 35: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 198 "Prexonite.lex"
                  PopState();
                  ret(tok(Parser._string, buffer.ToString()));
                  buffer.Length = 0;
                
#line default
          }
          break;
        case 62: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 182 "Prexonite.lex"
                  buffer.Append("\0"); 
#line default
          }
          break;
        case 69: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 203 "Prexonite.lex"
                  buffer.Append("\\"); 
#line default
          }
          break;
        case 112: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 124 "Prexonite.lex"
                            return tok(Parser._id,OperatorNames.Prexonite.ExclusiveOr); 
#line default
          }
          break;
        case 18: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 148 "Prexonite.lex"
              return tok(Parser._bitAnd); 
#line default
          }
          break;
        case 10: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 167 "Prexonite.lex"
              return tok(Parser._at); 
#line default
          }
          break;
        case 70: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 204 "Prexonite.lex"
                  buffer.Append("\""); 
#line default
          }
          break;
        case 104: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 132 "Prexonite.lex"
              return tok(Parser._id,OperatorNames.Prexonite.Increment); 
#line default
          }
          break;
        case 96: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 122 "Prexonite.lex"
             return tok(Parser._id,OperatorNames.Prexonite.BitwiseAnd); 
#line default
          }
          break;
        case 38: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 247 "Prexonite.lex"
                  buffer.Append("$"); 
#line default
          }
          break;
        case 93: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 119 "Prexonite.lex"
             return tok(Parser._id,OperatorNames.Prexonite.Division); 
#line default
          }
          break;
        case 110: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 130 "Prexonite.lex"
              return tok(Parser._id,OperatorNames.Prexonite.LessThanOrEqual); 
#line default
          }
          break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              {     return tok(Parser._EOF);
 }
              break;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
          break;
      }
    }
  }


}

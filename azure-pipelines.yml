
trigger:
  batch: true
  branches:
    include: 
    - '*'
  paths:
    exclude:
    - PxCoco/*

stages:
  - stage: build_test
    displayName: Build/Test
    variables:
      solution: 'prx.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    jobs:
      - job: build_test
        timeoutInMinutes: 5
        cancelTimeoutInMinutes: 1
        strategy:
          matrix:
            Windows:
              vmImage: 'windows-latest'
              jobSuffix: win
            Linux:
              vmImage: 'ubuntu-latest'
              jobSuffix: linux
        displayName: Build/Test
        pool:
          vmImage: '$(vmImage)'
        steps:
        - task: UseDotNet@2
          inputs:
            version: '3.1.x'

        - task: NuGetAuthenticate@0
        
        - task: DotNetCoreCLI@2
          displayName: Restore
          inputs:
            command: restore
            projects: '$(solution)'
            selectOrConfig: 'config'
            nugetConfigPath: NuGet.Config

        - task: DotNetCoreCLI@2
          displayName: Restore Tools
          inputs:
            command: custom
            custom: tool
            arguments: 'restore'
            selectOrConfig: 'config'
            nugetConfigPath: NuGet.Config
        
        - task: DotNetCoreCLI@2
          displayName: Build
          inputs:
            command: build
            projects: '$(solution)'
            arguments: '"/p:Platform=$(BuildPlatform);Configuration=$(BuildConfiguration)" --no-restore'
        
        - task: DotNetCoreCLI@2
          displayName: Unit Test
          inputs:
            command: test    
            projects: '**/*Tests.csproj'
            nobuild: true
            arguments: '"/p:Platform=$(BuildPlatform);Configuration=$(BuildConfiguration)" --no-restore'
        
        - task: DotNetCoreCLI@2
          displayName: Pack
          inputs:
            command: pack
            searchPatternPack: 'Prexonite/Prexonite.csproj'
            nobuild: true
            configurationToPack: $(BuildConfiguration)
            buildProperties: Platform=$(BuildPlatform)
        
        - task: PublishPipelineArtifact@0
          displayName: Publish to pipeline
          condition: and(succeeded(), eq(variables['jobSuffix'], 'win'))
          inputs:
            artifactName: 'binaries'
            targetPath: '$(Build.ArtifactStagingDirectory)'

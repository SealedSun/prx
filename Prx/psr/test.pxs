// Prexonite
// 
// Copyright (c) 2011, Christian Klauser
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
// 
//     Redistributions of source code must retain the above copyright notice, 
//          this list of conditions and the following disclaimer.
//     Redistributions in binary form must reproduce the above copyright notice, 
//          this list of conditions and the following disclaimer in the 
//          documentation and/or other materials provided with the distribution.
//     The names of the contributors may be used to endorse or 
//          promote products derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
//  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


//This is the first version of an automated testing -something- for Prexonite Script,
// obviously inspired by xUnit.
//

test\version "0.1";

function test\run_single_test as run_single_test(testFunc)
{
    var t = new Structure;
    t.\("test") = testFunc;
    try
    {
        testFunc.();
        return true: t;
    }
    catch(var e)
    {
        t.\("e") = e;
        return false: t;
    }
}

declare function test\basic_ui;
declare test\basic_ui as basic_ui;

var test\test_filters as test_filters = [];

function test\run_test as run_test(ui, testFunc)
{
    ui ??= basic_ui;
    if(testFunc is null)
        throw "testFunc cannot be null.";
    
    println("::>>TEST-FILTERS");
    test_filters >> each(println("\t-> ",?));
    testFunc = test_filters >> foldl(?1.(?0), testFunc);
    
    ui.begin_running(testFunc);
    var res = run_single_test(testFunc);
    if(res.Key)
        ui.success(res.Value);
    else
        ui.failure(res.Value);
        
    return res;
}

function test\list_tests as list_tests()
{
    var tags = append(["test"], var args >> map(?~String)) >> all;
    
    return asm(ldr.app).Functions 
        >> where(f => tags >> forall(f.Meta[?] then ?.Switch));       
}

function test\run_tests as run_tests()
{
    var args;
    var ui;
    if(args.Count > 0)
    {
        ui = args[0];
        if(ui is String or ui is Null)
            ui = basic_ui;
        else
            args = args >> skip(1);
    }
    else
    {
        ui = basic_ui;
    }
    
    ui.search_tests(args);
    
    var tests = call(list_tests(?),args) >> all;
    
    ui.begin_suite(tests);
    
    var results = tests >> map(run_test(ui, ?)) >> all;
    
    ui.end_suite(results);
}

function test\basic_ui
{
    var s = new Structure;
    
    s.\("tests") = [];
    
    s.\\("search_tests") = (self,tags) =>
    {
        println("Prexonite Tests v", asm(ldr.app).Meta[@"test\version"].Text);
        print("Searching for tests marked with [" + (tags >> foldr(concat(?,"; ",?),"]...")) );
    };
    
    s.\\("begin_suite") = (self,tests) =>
    {
        println(" done. $(tests.Count) tests found.");
        self.tests = tests;
    };
    
    var heavysep = "="*60;
    s.\\("end_suite") = (self,results) =>
    {
        println(heavysep);
        println("Testsuite complete, $(results.Count) tests run.");
        var failures = results >> where(?.Key then not ?) >> map(?.Value) >> all;
        println("\tpassed ", results.Count - failures.Count);
        println("\tfailed ", failures.Count);
        foreach(var r in failures)
            println("\t\t", r.test);
            
        if(failures.Count <= 0)
        {
            println("SUCCESS");
            
        }
        else
        {
            println("FAILURE");
        }
        println();
    };
    
    var sep = "-"*60;
    s.\\("begin_running") = (self,testFunc) =>
    {
        println(sep);
        println("Running test ",(testFunc),"...");
    };
    
    s.\\("success") = (self,result) =>
    {
        println("\tdone.");
    };
    
    s.\\("failure") = (self,result) =>
    {
        println(result.test," failed:");
        println(result.e);
        println();
    };
    
    return s;
}

function test\assert as assert(expr,msg)
{
    if(not expr)
        throw "Assertion failure: $msg";
}

function test\assert_eq as assert_eq(actual,expected,msg)
{
    msg ??= "";
    msg ~= String;
    assert(actual == expected, (if(msg.Length > 0) msg + "." else "") + "\n" +
        "\tExpected: $(boxed(expected))\n" + 
        "\t  Actual: $(boxed(actual))");
}

function test\assert_neq as assert_neq(actual,expected, msg)
{
    msg ??= "";
    msg ~= String;
    assert(actual != expected, (if(msg.Length > 0) msg + "." else "") + "\n" +
        "\tUnexpected: $(boxed(expected))\n" + 
        "\t    Actual: $(boxed(actual))");
}